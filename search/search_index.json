{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CARET analyze # TODO API # architecture common infra plot record runtime value_objects exceptions","title":"HOME"},{"location":"#caret-analyze","text":"TODO","title":"CARET analyze"},{"location":"#api","text":"architecture common infra plot record runtime value_objects exceptions","title":"API"},{"location":"architecture/","text":"reader_interface # ArchitectureReader # Architecture reader base class. get_executors () abstractmethod # Get executor values. Returns: Type Description Sequence [ ExecutorValue ] executor values get_nodes () abstractmethod # Get nodes. Returns: Type Description Sequence [ NodeValue ] node values. get_paths () abstractmethod # Get path value. Returns: Type Description Sequence [ PathInfo ] path values struct # CallbacksStruct # Bases: CallbacksStructInterface , Iterable get_callbacks ( * callback_ids ) # Get callbacks. Parameters: Name Type Description Default callback_ids Tuple [ str , ...] target callback ids required Returns: Type Description CallbacksStruct If the callback is not found, it returns an empty tuple. callback # CallbacksStruct # Bases: CallbacksStructInterface , Iterable get_callbacks ( * callback_ids ) # Get callbacks. Parameters: Name Type Description Default callback_ids Tuple [ str , ...] target callback ids required Returns: Type Description CallbacksStruct If the callback is not found, it returns an empty tuple.","title":"Architecture"},{"location":"architecture/#caret_analyze.architecture.reader_interface","text":"","title":"reader_interface"},{"location":"architecture/#caret_analyze.architecture.reader_interface.ArchitectureReader","text":"Architecture reader base class.","title":"ArchitectureReader"},{"location":"architecture/#caret_analyze.architecture.reader_interface.ArchitectureReader.get_executors","text":"Get executor values. Returns: Type Description Sequence [ ExecutorValue ] executor values","title":"get_executors()"},{"location":"architecture/#caret_analyze.architecture.reader_interface.ArchitectureReader.get_nodes","text":"Get nodes. Returns: Type Description Sequence [ NodeValue ] node values.","title":"get_nodes()"},{"location":"architecture/#caret_analyze.architecture.reader_interface.ArchitectureReader.get_paths","text":"Get path value. Returns: Type Description Sequence [ PathInfo ] path values","title":"get_paths()"},{"location":"architecture/#caret_analyze.architecture.struct","text":"","title":"struct"},{"location":"architecture/#caret_analyze.architecture.struct.CallbacksStruct","text":"Bases: CallbacksStructInterface , Iterable","title":"CallbacksStruct"},{"location":"architecture/#caret_analyze.architecture.struct.callback.CallbacksStruct.get_callbacks","text":"Get callbacks. Parameters: Name Type Description Default callback_ids Tuple [ str , ...] target callback ids required Returns: Type Description CallbacksStruct If the callback is not found, it returns an empty tuple.","title":"get_callbacks()"},{"location":"architecture/#caret_analyze.architecture.struct.callback","text":"","title":"callback"},{"location":"architecture/#caret_analyze.architecture.struct.callback.CallbacksStruct","text":"Bases: CallbacksStructInterface , Iterable","title":"CallbacksStruct"},{"location":"architecture/#caret_analyze.architecture.struct.callback.CallbacksStruct.get_callbacks","text":"Get callbacks. Parameters: Name Type Description Default callback_ids Tuple [ str , ...] target callback ids required Returns: Type Description CallbacksStruct If the callback is not found, it returns an empty tuple.","title":"get_callbacks()"},{"location":"common/","text":"Summary # Bases: UserDict Temporary dictionary to use when outputting summaries. Util # find_one ( condition , items ) staticmethod # Get a single item that matches the condition. Parameters: Name Type Description Default condition Callable [[ Any ], bool ] required items Optional [ Iterable [ Any ]] required Returns: Type Description Any condition matched single item. Raises: Type Description ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. summary # Summary # Bases: UserDict Temporary dictionary to use when outputting summaries. util # Util # find_one ( condition , items ) staticmethod # Get a single item that matches the condition. Parameters: Name Type Description Default condition Callable [[ Any ], bool ] required items Optional [ Iterable [ Any ]] required Returns: Type Description Any condition matched single item. Raises: Type Description ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"Common"},{"location":"common/#caret_analyze.common.Summary","text":"Bases: UserDict Temporary dictionary to use when outputting summaries.","title":"Summary"},{"location":"common/#caret_analyze.common.Util","text":"","title":"Util"},{"location":"common/#caret_analyze.common.util.Util.find_one","text":"Get a single item that matches the condition. Parameters: Name Type Description Default condition Callable [[ Any ], bool ] required items Optional [ Iterable [ Any ]] required Returns: Type Description Any condition matched single item. Raises: Type Description ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"find_one()"},{"location":"common/#caret_analyze.common.summary","text":"","title":"summary"},{"location":"common/#caret_analyze.common.summary.Summary","text":"Bases: UserDict Temporary dictionary to use when outputting summaries.","title":"Summary"},{"location":"common/#caret_analyze.common.util","text":"","title":"util"},{"location":"common/#caret_analyze.common.util.Util","text":"","title":"Util"},{"location":"common/#caret_analyze.common.util.Util.find_one","text":"Get a single item that matches the condition. Parameters: Name Type Description Default condition Callable [[ Any ], bool ] required items Optional [ Iterable [ Any ]] required Returns: Type Description Any condition matched single item. Raises: Type Description ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"find_one()"},{"location":"exceptions/","text":"Error # Bases: Exception Base class for exception in this module. InvalidArgumentError # Bases: Error Failed to process function. InvalidColumnAttributeError # Bases: Error Given column attribute miss match requests. InvalidColumnMapperError # Bases: Error Given column mapper miss match. InvalidReaderError # Bases: Error Failed to load architecutre. InvalidRecordsError # Bases: Error Given Records does not have the necessary columns. InvalidTraceFormatError # Bases: Error Failed to load trace data. InvalidYamlFormatError # Bases: Error Failed to load yaml. ItemNotFoundError # Bases: Error Failed to identify item that match the condition. MultipleItemFoundError # Bases: Error Failed to identify item that match the condition. TraceResultAanalyzeError # Bases: Error Failed to parse trace results. __init__ ( * args ) # Construct exception instance. UnsupportedNodeRecordsError # Bases: Error Failed to calculate node path records. UnsupportedTypeError # Bases: Error Given type is unsupported.","title":"Exceptions"},{"location":"exceptions/#caret_analyze.exceptions.Error","text":"Bases: Exception Base class for exception in this module.","title":"Error"},{"location":"exceptions/#caret_analyze.exceptions.InvalidArgumentError","text":"Bases: Error Failed to process function.","title":"InvalidArgumentError"},{"location":"exceptions/#caret_analyze.exceptions.InvalidColumnAttributeError","text":"Bases: Error Given column attribute miss match requests.","title":"InvalidColumnAttributeError"},{"location":"exceptions/#caret_analyze.exceptions.InvalidColumnMapperError","text":"Bases: Error Given column mapper miss match.","title":"InvalidColumnMapperError"},{"location":"exceptions/#caret_analyze.exceptions.InvalidReaderError","text":"Bases: Error Failed to load architecutre.","title":"InvalidReaderError"},{"location":"exceptions/#caret_analyze.exceptions.InvalidRecordsError","text":"Bases: Error Given Records does not have the necessary columns.","title":"InvalidRecordsError"},{"location":"exceptions/#caret_analyze.exceptions.InvalidTraceFormatError","text":"Bases: Error Failed to load trace data.","title":"InvalidTraceFormatError"},{"location":"exceptions/#caret_analyze.exceptions.InvalidYamlFormatError","text":"Bases: Error Failed to load yaml.","title":"InvalidYamlFormatError"},{"location":"exceptions/#caret_analyze.exceptions.ItemNotFoundError","text":"Bases: Error Failed to identify item that match the condition.","title":"ItemNotFoundError"},{"location":"exceptions/#caret_analyze.exceptions.MultipleItemFoundError","text":"Bases: Error Failed to identify item that match the condition.","title":"MultipleItemFoundError"},{"location":"exceptions/#caret_analyze.exceptions.TraceResultAanalyzeError","text":"Bases: Error Failed to parse trace results.","title":"TraceResultAanalyzeError"},{"location":"exceptions/#caret_analyze.exceptions.TraceResultAanalyzeError.__init__","text":"Construct exception instance.","title":"__init__()"},{"location":"exceptions/#caret_analyze.exceptions.UnsupportedNodeRecordsError","text":"Bases: Error Failed to calculate node path records.","title":"UnsupportedNodeRecordsError"},{"location":"exceptions/#caret_analyze.exceptions.UnsupportedTypeError","text":"Bases: Error Given type is unsupported.","title":"UnsupportedTypeError"},{"location":"infra/","text":"InfraBase # Bases: Singleton infrastracture base class. This class is a singleton in order to retain information. Lttng # Bases: InfraBase Lttng data container class. This class is a singleton in order to retain information. The main processing is done by LttngInfo and RecordsSource. get_callback_groups ( node ) # Get callback group information. Returns: Type Description Sequence [ CallbackGroupValue ] get_executors () # Get executors information. Returns: Type Description Sequence [ ExecutorInfo ] get_inter_proc_comm_records ( comm ) # Compose inter process communication records of all communications in one records. Returns: Type Description RecordsInterface columns - callback_object - callback_start_timestamp - publisher_handle - rclcpp_publish_timestamp - rcl_publish_timestamp (Optional) - dds_write_timestamp (Optional) get_intra_proc_comm_records ( comm ) # Compose inter process communication records of all communications in one records. Returns: Type Description RecordsInterface columns - callback_object - callback_start_timestamp - publisher_handle - rclcpp_publish_timestamp - rcl_publish_timestamp (Optional) - dds_write_timestamp (Optional) get_nodes () # Get nodes. Returns: Type Description Sequence [ NodeValue ] nodes info. get_publisher_qos ( pub ) # Get publisher qos. Parameters: Name Type Description Default pub PublisherValueLttng target publisher required Returns: Type Description Qos get_publishers ( node ) # Get publishers information. Parameters: Name Type Description Default node NodeValue target node. required Returns: Type Description Sequence [ PublisherInfoLttng ] get_rmw_impl () # Get rmw implementation. Returns: Type Description str rmw_implementation get_subscription_callbacks ( node ) # Get subscription callbacks infomation. Parameters: Name Type Description Default node NodeValue target node name. required Returns: Type Description Sequence [ SubscriptionCallbackInfoLttng ] get_subscription_qos ( sub ) # Get subscription qos. Parameters: Name Type Description Default sub SubscriptionValueLttng target subscription required Returns: Type Description Qos get_subscriptions ( node ) # Get subscriptions information. Parameters: Name Type Description Default node NodeValue target node. required Returns: Type Description Sequence [ SubscriptionInfoLttng ] get_timer_callbacks ( node ) # Get timer callback values. Parameters: Name Type Description Default node NodeValue target node name. required Returns: Type Description Sequence [ TimerCallbackInfoLttng ] get_timers ( node ) # Get timers information. Returns: Type Description Sequence [ TimerValue ] RecordsProvider # callback_records ( callback_info ) abstractmethod # Compose callback records. Parameters: Name Type Description Default callback_info CallbackStructInfo [description] required Returns: Type Description RecordsInterface [description] variable_passing_records ( variable_passing_info ) abstractmethod # Compose variable passing records. Parameters: Name Type Description Default variable_passing_info VariablePassingStructInfo required Returns: Type Description RecordsInterface infra_base # InfraBase # Bases: Singleton infrastracture base class. This class is a singleton in order to retain information. interface # RecordsProvider # callback_records ( callback_info ) abstractmethod # Compose callback records. Parameters: Name Type Description Default callback_info CallbackStructInfo [description] required Returns: Type Description RecordsInterface [description] variable_passing_records ( variable_passing_info ) abstractmethod # Compose variable passing records. Parameters: Name Type Description Default variable_passing_info VariablePassingStructInfo required Returns: Type Description RecordsInterface lttng # Lttng # Bases: InfraBase Lttng data container class. This class is a singleton in order to retain information. The main processing is done by LttngInfo and RecordsSource. get_callback_groups ( node ) # Get callback group information. Returns: Type Description Sequence [ CallbackGroupValue ] get_executors () # Get executors information. Returns: Type Description Sequence [ ExecutorInfo ] get_inter_proc_comm_records ( comm ) # Compose inter process communication records of all communications in one records. Returns: Type Description RecordsInterface columns - callback_object - callback_start_timestamp - publisher_handle - rclcpp_publish_timestamp - rcl_publish_timestamp (Optional) - dds_write_timestamp (Optional) get_intra_proc_comm_records ( comm ) # Compose inter process communication records of all communications in one records. Returns: Type Description RecordsInterface columns - callback_object - callback_start_timestamp - publisher_handle - rclcpp_publish_timestamp - rcl_publish_timestamp (Optional) - dds_write_timestamp (Optional) get_nodes () # Get nodes. Returns: Type Description Sequence [ NodeValue ] nodes info. get_publisher_qos ( pub ) # Get publisher qos. Parameters: Name Type Description Default pub PublisherValueLttng target publisher required Returns: Type Description Qos get_publishers ( node ) # Get publishers information. Parameters: Name Type Description Default node NodeValue target node. required Returns: Type Description Sequence [ PublisherInfoLttng ] get_rmw_impl () # Get rmw implementation. Returns: Type Description str rmw_implementation get_subscription_callbacks ( node ) # Get subscription callbacks infomation. Parameters: Name Type Description Default node NodeValue target node name. required Returns: Type Description Sequence [ SubscriptionCallbackInfoLttng ] get_subscription_qos ( sub ) # Get subscription qos. Parameters: Name Type Description Default sub SubscriptionValueLttng target subscription required Returns: Type Description Qos get_subscriptions ( node ) # Get subscriptions information. Parameters: Name Type Description Default node NodeValue target node. required Returns: Type Description Sequence [ SubscriptionInfoLttng ] get_timer_callbacks ( node ) # Get timer callback values. Parameters: Name Type Description Default node NodeValue target node name. required Returns: Type Description Sequence [ TimerCallbackInfoLttng ] get_timers ( node ) # Get timers information. Returns: Type Description Sequence [ TimerValue ] RecordsProviderLttng # Bases: RuntimeDataProvider Records are processed and measurement results are calculated. In addition to merging, filtering and other operations are performed here. callback_records ( callback ) # Return callback duration records. Parameters: Name Type Description Default callback_val CallbackStructValue target callback value. required Returns: Type Description RecordsInterface Columns - [callback_name]/callback_start_timestamp - [callback_name]/callback_end_timestamp communication_records ( comm_val ) # Provide communication records. Parameters: Name Type Description Default comm_info CommunicationStructInfo communicadtion info. required Returns: Type Description RecordsInterface Columns: - [topic_name]/rclcpp_publish_timestamp - [topic_name]/rcl_publish_timestamp (Optional) - [topic_name]/dds_publish_timestamp (Optional) - [callback_name]/callback_start_timestamp publish_records ( publisher ) # Return publish records. Parameters: Name Type Description Default publish PublisherStructValue target publisher required Returns: Type Description RecordsInterface Columns - [topic_name]/rclcpp_publish_timestamp - [topic_name]/rclcpp_intra_publish_timestamp (Optional) - [topic_name]/rclcpp_inter_publish_timestamp (Optional) - [topic_name]/rcl_publish_timestamp (Optional) - [topic_name]/dds_write_timestamp (Optional) - [topic_name]/message_timestamp - [topic_name]/source_timestamp (Optional) [topic_name]/tilde_publish_timestamp (Optional) [topic_name]/tilde_message_id (Optional) subscribe_records ( subscription ) # Provide subscription records. Parameters: Name Type Description Default subscription_value SubscriptionStructValue Target subscription value. required Returns: Type Description RecordsInterface Columns - [callback_name]/callback_start_timestamp - [topic_name]/message_timestamp - [topic_name]/source_timestamp Raises: Type Description InvalidArgumentError tf_broadcast_records ( broadcaster ) # Compose transform broadcast records. Parameters: Name Type Description Default broadcaster TransformBroadcasterStructValue target bradcaster required transform Optional [ TransformValue ] target transform required Returns: Type Description RecordsInterface Columns - frame_id - child_frame_id - same as publlish records timer_records ( timer ) # Return timer records. Parameters: Name Type Description Default timer TimerStructValue [description] required Returns: Type Description RecordsInterface Columns - [callback_name]/timer_event - [callback_name]/callback_start - [callback_name]/callback_end variable_passing_records ( variable_passing_info ) # Return variable passing records. Parameters: Name Type Description Default variable_passing_info VariablePassingStructInfo target variable passing info. required Returns: Type Description RecordsInterface Columns - [callback_name]/callback_end_timestamp - [callback_name]/callback_start_timestamp bridge # LttngBridge # get_ipc_buffer ( ipc_buffer ) cached # Get publisher handles. Parameters: Name Type Description Default node_name str required topic_name str required Returns: Type Description List [ PublisherValueLttng ] publisher values that matches the condition get_publishers ( publisher_value ) cached # Get publisher handles. Parameters: Name Type Description Default node_name str required topic_name str required Returns: Type Description List [ PublisherValueLttng ] publisher values that matches the condition get_subscription_callback ( callback ) cached # Get subscription callback value with the same conditions. used conditions: - node name - callback type - subscription topic name - publish topic names Parameters: Name Type Description Default callback SubscriptionCallbackStructValue Callback value to be searched. required Returns: Type Description SubscriptionCallbackValueLttng Timer callback value, including runtime information. Raises: Type Description ItemNotFoundError No value matching the search condition is found. MultipleItemFoundError Multiple pieces of values matching the search condition are found. get_timer_callback ( callback ) cached # Compare timer callback value with the same conditions. used conditions: - node name - callback type - period_ns - publish topic names Parameters: Name Type Description Default callback TimerCallbackStructValue Callback value to be searched. required Returns: Type Description [ TimerCallbackValueLttng ] Timer callback value, including runtime information. Raises: Type Description ItemNotFoundError No value matching the search condition is found. MultipleItemFoundError Multiple pieces of values matching the search condition are found. lttng # Lttng # Bases: InfraBase Lttng data container class. This class is a singleton in order to retain information. The main processing is done by LttngInfo and RecordsSource. get_callback_groups ( node ) # Get callback group information. Returns: Type Description Sequence [ CallbackGroupValue ] get_executors () # Get executors information. Returns: Type Description Sequence [ ExecutorInfo ] get_inter_proc_comm_records ( comm ) # Compose inter process communication records of all communications in one records. Returns: Type Description RecordsInterface columns - callback_object - callback_start_timestamp - publisher_handle - rclcpp_publish_timestamp - rcl_publish_timestamp (Optional) - dds_write_timestamp (Optional) get_intra_proc_comm_records ( comm ) # Compose inter process communication records of all communications in one records. Returns: Type Description RecordsInterface columns - callback_object - callback_start_timestamp - publisher_handle - rclcpp_publish_timestamp - rcl_publish_timestamp (Optional) - dds_write_timestamp (Optional) get_nodes () # Get nodes. Returns: Type Description Sequence [ NodeValue ] nodes info. get_publisher_qos ( pub ) # Get publisher qos. Parameters: Name Type Description Default pub PublisherValueLttng target publisher required Returns: Type Description Qos get_publishers ( node ) # Get publishers information. Parameters: Name Type Description Default node NodeValue target node. required Returns: Type Description Sequence [ PublisherInfoLttng ] get_rmw_impl () # Get rmw implementation. Returns: Type Description str rmw_implementation get_subscription_callbacks ( node ) # Get subscription callbacks infomation. Parameters: Name Type Description Default node NodeValue target node name. required Returns: Type Description Sequence [ SubscriptionCallbackInfoLttng ] get_subscription_qos ( sub ) # Get subscription qos. Parameters: Name Type Description Default sub SubscriptionValueLttng target subscription required Returns: Type Description Qos get_subscriptions ( node ) # Get subscriptions information. Parameters: Name Type Description Default node NodeValue target node. required Returns: Type Description Sequence [ SubscriptionInfoLttng ] get_timer_callbacks ( node ) # Get timer callback values. Parameters: Name Type Description Default node NodeValue target node name. required Returns: Type Description Sequence [ TimerCallbackInfoLttng ] get_timers ( node ) # Get timers information. Returns: Type Description Sequence [ TimerValue ] lttng_info # DataFrameFormatted # callback_groups_df () property # Get callback group info table. Returns: Type Description pd . DataFrame Columns - callback_group_addr - executor_addr - group_type_name executor_df () property # Get executor info table. Returns: Type Description pd . DataFrame Columns - executor_addr - executor_type_name nodes_df () property # Build node table. Parameters: Name Type Description Default data Ros2DataModel required Returns: Type Description pd . DataFrame Columns - node_handle - node_name publishers_df () property # Get publisher info table. Returns: Type Description pd . DataFrame Columns - publisher_handle - node_handle - topic_name - depth service_callbacks_df () property # Get service info table. Returns: Type Description pd . DataFrame Columns - callback_id - callback_object - node_handle - service_handle - callback_group_addr - service_name - symbol subscription_callbacks_df () property # Build subscription callback table. Parameters: Name Type Description Default data Ros2DataModel required Returns: Type Description pd . DataFrame columns - callback_object - callback_object_intra - node_handle - subscription_handle - callback_group_addr - topic_name - symbol - callback_id - depth tilde_publishers_df () property # Get tilde wrapped publisher. Returns: Type Description pd . DataFrame Columns - tilde_publisher - node_name - topic_name tilde_subscriptions_df () property # Get tilde wrapped subscription. Returns: Type Description pd . DataFrame Columns - tilde_subscription - node_name - topic_name timer_callbacks_df () property # Build timer callbacks table. Parameters: Name Type Description Default data Ros2DataModel required Returns: Type Description pd . DataFrame Column - callback_object - node_handle - timer_handle - callback_group_addr - period_ns, - symbol - callback_id LttngInfo # get_callback_groups ( node ) # Get callback groups value. Returns: Type Description List [ CallbackGroupInfo ] get_executors () cached # Get executors information. Returns: Type Description List [ ExecutorInfo ] get_nodes () cached # Get node name list. Returns: Type Description Sequence [ NodeValue ] node names. get_publishers ( node ) # Get publishers information. Parameters: Name Type Description Default node NodeValue target node. required Returns: Type Description List [ PublisherInfo ] get_rmw_impl () # Get rmw implementation. Returns: Type Description str rmw_implementation get_subscription_callbacks ( node ) # Get subscription callbacks infomation. Parameters: Name Type Description Default node_name str target node name. required Returns: Type Description Sequence [ SubscriptionCallbackInfo ] get_timer_callbacks ( node ) # Get timer callbacks information. Parameters: Name Type Description Default node_name str target node name. required Returns: Type Description Sequence [ TimerCallbackInfo ] records_provider_lttng # RecordsProviderLttng # Bases: RuntimeDataProvider Records are processed and measurement results are calculated. In addition to merging, filtering and other operations are performed here. callback_records ( callback ) # Return callback duration records. Parameters: Name Type Description Default callback_val CallbackStructValue target callback value. required Returns: Type Description RecordsInterface Columns - [callback_name]/callback_start_timestamp - [callback_name]/callback_end_timestamp communication_records ( comm_val ) # Provide communication records. Parameters: Name Type Description Default comm_info CommunicationStructInfo communicadtion info. required Returns: Type Description RecordsInterface Columns: - [topic_name]/rclcpp_publish_timestamp - [topic_name]/rcl_publish_timestamp (Optional) - [topic_name]/dds_publish_timestamp (Optional) - [callback_name]/callback_start_timestamp publish_records ( publisher ) # Return publish records. Parameters: Name Type Description Default publish PublisherStructValue target publisher required Returns: Type Description RecordsInterface Columns - [topic_name]/rclcpp_publish_timestamp - [topic_name]/rclcpp_intra_publish_timestamp (Optional) - [topic_name]/rclcpp_inter_publish_timestamp (Optional) - [topic_name]/rcl_publish_timestamp (Optional) - [topic_name]/dds_write_timestamp (Optional) - [topic_name]/message_timestamp - [topic_name]/source_timestamp (Optional) [topic_name]/tilde_publish_timestamp (Optional) [topic_name]/tilde_message_id (Optional) subscribe_records ( subscription ) # Provide subscription records. Parameters: Name Type Description Default subscription_value SubscriptionStructValue Target subscription value. required Returns: Type Description RecordsInterface Columns - [callback_name]/callback_start_timestamp - [topic_name]/message_timestamp - [topic_name]/source_timestamp Raises: Type Description InvalidArgumentError tf_broadcast_records ( broadcaster ) # Compose transform broadcast records. Parameters: Name Type Description Default broadcaster TransformBroadcasterStructValue target bradcaster required transform Optional [ TransformValue ] target transform required Returns: Type Description RecordsInterface Columns - frame_id - child_frame_id - same as publlish records timer_records ( timer ) # Return timer records. Parameters: Name Type Description Default timer TimerStructValue [description] required Returns: Type Description RecordsInterface Columns - [callback_name]/timer_event - [callback_name]/callback_start - [callback_name]/callback_end variable_passing_records ( variable_passing_info ) # Return variable passing records. Parameters: Name Type Description Default variable_passing_info VariablePassingStructInfo target variable passing info. required Returns: Type Description RecordsInterface Columns - [callback_name]/callback_end_timestamp - [callback_name]/callback_start_timestamp records_source # RecordsSource # callback_records ( callback ) # Compose callback records. Used tracepoints - callback_start - callback_end Returns: Type Description RecordsInterface columns: - callback_start_timestamp - callback_end_timestamp - callback_object intra_proc_comm_records ( communication ) # Compose intra process communication records. Used tracepoints - dispatch_intra_process_subscription_callback - rclcpp_publish - message_construct - callback_start Returns: Type Description RecordsInterface columns: - callback_object - callback_start_timestamp - publisher_handle - rclcpp_publish_timestamp - message_timestamp records_source # RecordsSource # callback_records ( callback ) # Compose callback records. Used tracepoints - callback_start - callback_end Returns: Type Description RecordsInterface columns: - callback_start_timestamp - callback_end_timestamp - callback_object intra_proc_comm_records ( communication ) # Compose intra process communication records. Used tracepoints - dispatch_intra_process_subscription_callback - rclcpp_publish - message_construct - callback_start Returns: Type Description RecordsInterface columns: - callback_object - callback_start_timestamp - publisher_handle - rclcpp_publish_timestamp - message_timestamp ros2_tracing # Ros2DataModel # Bases: DataModel Container to model pre-processed ROS 2 data for analysis. This aims to represent the data in a ROS 2-aware way. __init__ () # Create a Ros2DataModel. Ros2Handler # Bases: EventHandler ROS 2-aware event handling class implementation. Handles a trace's events and builds a model with the data. __init__ ( ** kwargs ) # Create a Ros2Handler. data_model # Module for ROS 2 data model. Ros2DataModel # Bases: DataModel Container to model pre-processed ROS 2 data for analysis. This aims to represent the data in a ROS 2-aware way. __init__ () # Create a Ros2DataModel. processor # Module for trace events processor and ROS 2 model creation. Ros2Handler # Bases: EventHandler ROS 2-aware event handling class implementation. Handles a trace's events and builds a model with the data. __init__ ( ** kwargs ) # Create a Ros2Handler.","title":"Infra"},{"location":"infra/#caret_analyze.infra.InfraBase","text":"Bases: Singleton infrastracture base class. This class is a singleton in order to retain information.","title":"InfraBase"},{"location":"infra/#caret_analyze.infra.Lttng","text":"Bases: InfraBase Lttng data container class. This class is a singleton in order to retain information. The main processing is done by LttngInfo and RecordsSource.","title":"Lttng"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_callback_groups","text":"Get callback group information. Returns: Type Description Sequence [ CallbackGroupValue ]","title":"get_callback_groups()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_executors","text":"Get executors information. Returns: Type Description Sequence [ ExecutorInfo ]","title":"get_executors()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_inter_proc_comm_records","text":"Compose inter process communication records of all communications in one records. Returns: Type Description RecordsInterface columns - callback_object - callback_start_timestamp - publisher_handle - rclcpp_publish_timestamp - rcl_publish_timestamp (Optional) - dds_write_timestamp (Optional)","title":"get_inter_proc_comm_records()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_intra_proc_comm_records","text":"Compose inter process communication records of all communications in one records. Returns: Type Description RecordsInterface columns - callback_object - callback_start_timestamp - publisher_handle - rclcpp_publish_timestamp - rcl_publish_timestamp (Optional) - dds_write_timestamp (Optional)","title":"get_intra_proc_comm_records()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_nodes","text":"Get nodes. Returns: Type Description Sequence [ NodeValue ] nodes info.","title":"get_nodes()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_publisher_qos","text":"Get publisher qos. Parameters: Name Type Description Default pub PublisherValueLttng target publisher required Returns: Type Description Qos","title":"get_publisher_qos()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_publishers","text":"Get publishers information. Parameters: Name Type Description Default node NodeValue target node. required Returns: Type Description Sequence [ PublisherInfoLttng ]","title":"get_publishers()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_rmw_impl","text":"Get rmw implementation. Returns: Type Description str rmw_implementation","title":"get_rmw_impl()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_subscription_callbacks","text":"Get subscription callbacks infomation. Parameters: Name Type Description Default node NodeValue target node name. required Returns: Type Description Sequence [ SubscriptionCallbackInfoLttng ]","title":"get_subscription_callbacks()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_subscription_qos","text":"Get subscription qos. Parameters: Name Type Description Default sub SubscriptionValueLttng target subscription required Returns: Type Description Qos","title":"get_subscription_qos()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_subscriptions","text":"Get subscriptions information. Parameters: Name Type Description Default node NodeValue target node. required Returns: Type Description Sequence [ SubscriptionInfoLttng ]","title":"get_subscriptions()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_timer_callbacks","text":"Get timer callback values. Parameters: Name Type Description Default node NodeValue target node name. required Returns: Type Description Sequence [ TimerCallbackInfoLttng ]","title":"get_timer_callbacks()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_timers","text":"Get timers information. Returns: Type Description Sequence [ TimerValue ]","title":"get_timers()"},{"location":"infra/#caret_analyze.infra.RecordsProvider","text":"","title":"RecordsProvider"},{"location":"infra/#caret_analyze.infra.interface.RecordsProvider.callback_records","text":"Compose callback records. Parameters: Name Type Description Default callback_info CallbackStructInfo [description] required Returns: Type Description RecordsInterface [description]","title":"callback_records()"},{"location":"infra/#caret_analyze.infra.interface.RecordsProvider.variable_passing_records","text":"Compose variable passing records. Parameters: Name Type Description Default variable_passing_info VariablePassingStructInfo required Returns: Type Description RecordsInterface","title":"variable_passing_records()"},{"location":"infra/#caret_analyze.infra.infra_base","text":"","title":"infra_base"},{"location":"infra/#caret_analyze.infra.infra_base.InfraBase","text":"Bases: Singleton infrastracture base class. This class is a singleton in order to retain information.","title":"InfraBase"},{"location":"infra/#caret_analyze.infra.interface","text":"","title":"interface"},{"location":"infra/#caret_analyze.infra.interface.RecordsProvider","text":"","title":"RecordsProvider"},{"location":"infra/#caret_analyze.infra.interface.RecordsProvider.callback_records","text":"Compose callback records. Parameters: Name Type Description Default callback_info CallbackStructInfo [description] required Returns: Type Description RecordsInterface [description]","title":"callback_records()"},{"location":"infra/#caret_analyze.infra.interface.RecordsProvider.variable_passing_records","text":"Compose variable passing records. Parameters: Name Type Description Default variable_passing_info VariablePassingStructInfo required Returns: Type Description RecordsInterface","title":"variable_passing_records()"},{"location":"infra/#caret_analyze.infra.lttng","text":"","title":"lttng"},{"location":"infra/#caret_analyze.infra.lttng.Lttng","text":"Bases: InfraBase Lttng data container class. This class is a singleton in order to retain information. The main processing is done by LttngInfo and RecordsSource.","title":"Lttng"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_callback_groups","text":"Get callback group information. Returns: Type Description Sequence [ CallbackGroupValue ]","title":"get_callback_groups()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_executors","text":"Get executors information. Returns: Type Description Sequence [ ExecutorInfo ]","title":"get_executors()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_inter_proc_comm_records","text":"Compose inter process communication records of all communications in one records. Returns: Type Description RecordsInterface columns - callback_object - callback_start_timestamp - publisher_handle - rclcpp_publish_timestamp - rcl_publish_timestamp (Optional) - dds_write_timestamp (Optional)","title":"get_inter_proc_comm_records()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_intra_proc_comm_records","text":"Compose inter process communication records of all communications in one records. Returns: Type Description RecordsInterface columns - callback_object - callback_start_timestamp - publisher_handle - rclcpp_publish_timestamp - rcl_publish_timestamp (Optional) - dds_write_timestamp (Optional)","title":"get_intra_proc_comm_records()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_nodes","text":"Get nodes. Returns: Type Description Sequence [ NodeValue ] nodes info.","title":"get_nodes()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_publisher_qos","text":"Get publisher qos. Parameters: Name Type Description Default pub PublisherValueLttng target publisher required Returns: Type Description Qos","title":"get_publisher_qos()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_publishers","text":"Get publishers information. Parameters: Name Type Description Default node NodeValue target node. required Returns: Type Description Sequence [ PublisherInfoLttng ]","title":"get_publishers()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_rmw_impl","text":"Get rmw implementation. Returns: Type Description str rmw_implementation","title":"get_rmw_impl()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_subscription_callbacks","text":"Get subscription callbacks infomation. Parameters: Name Type Description Default node NodeValue target node name. required Returns: Type Description Sequence [ SubscriptionCallbackInfoLttng ]","title":"get_subscription_callbacks()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_subscription_qos","text":"Get subscription qos. Parameters: Name Type Description Default sub SubscriptionValueLttng target subscription required Returns: Type Description Qos","title":"get_subscription_qos()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_subscriptions","text":"Get subscriptions information. Parameters: Name Type Description Default node NodeValue target node. required Returns: Type Description Sequence [ SubscriptionInfoLttng ]","title":"get_subscriptions()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_timer_callbacks","text":"Get timer callback values. Parameters: Name Type Description Default node NodeValue target node name. required Returns: Type Description Sequence [ TimerCallbackInfoLttng ]","title":"get_timer_callbacks()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_timers","text":"Get timers information. Returns: Type Description Sequence [ TimerValue ]","title":"get_timers()"},{"location":"infra/#caret_analyze.infra.lttng.RecordsProviderLttng","text":"Bases: RuntimeDataProvider Records are processed and measurement results are calculated. In addition to merging, filtering and other operations are performed here.","title":"RecordsProviderLttng"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.callback_records","text":"Return callback duration records. Parameters: Name Type Description Default callback_val CallbackStructValue target callback value. required Returns: Type Description RecordsInterface Columns - [callback_name]/callback_start_timestamp - [callback_name]/callback_end_timestamp","title":"callback_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.communication_records","text":"Provide communication records. Parameters: Name Type Description Default comm_info CommunicationStructInfo communicadtion info. required Returns: Type Description RecordsInterface Columns: - [topic_name]/rclcpp_publish_timestamp - [topic_name]/rcl_publish_timestamp (Optional) - [topic_name]/dds_publish_timestamp (Optional) - [callback_name]/callback_start_timestamp","title":"communication_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.publish_records","text":"Return publish records. Parameters: Name Type Description Default publish PublisherStructValue target publisher required Returns: Type Description RecordsInterface Columns - [topic_name]/rclcpp_publish_timestamp - [topic_name]/rclcpp_intra_publish_timestamp (Optional) - [topic_name]/rclcpp_inter_publish_timestamp (Optional) - [topic_name]/rcl_publish_timestamp (Optional) - [topic_name]/dds_write_timestamp (Optional) - [topic_name]/message_timestamp - [topic_name]/source_timestamp (Optional) [topic_name]/tilde_publish_timestamp (Optional) [topic_name]/tilde_message_id (Optional)","title":"publish_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.subscribe_records","text":"Provide subscription records. Parameters: Name Type Description Default subscription_value SubscriptionStructValue Target subscription value. required Returns: Type Description RecordsInterface Columns - [callback_name]/callback_start_timestamp - [topic_name]/message_timestamp - [topic_name]/source_timestamp Raises: Type Description InvalidArgumentError","title":"subscribe_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.tf_broadcast_records","text":"Compose transform broadcast records. Parameters: Name Type Description Default broadcaster TransformBroadcasterStructValue target bradcaster required transform Optional [ TransformValue ] target transform required Returns: Type Description RecordsInterface Columns - frame_id - child_frame_id - same as publlish records","title":"tf_broadcast_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.timer_records","text":"Return timer records. Parameters: Name Type Description Default timer TimerStructValue [description] required Returns: Type Description RecordsInterface Columns - [callback_name]/timer_event - [callback_name]/callback_start - [callback_name]/callback_end","title":"timer_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.variable_passing_records","text":"Return variable passing records. Parameters: Name Type Description Default variable_passing_info VariablePassingStructInfo target variable passing info. required Returns: Type Description RecordsInterface Columns - [callback_name]/callback_end_timestamp - [callback_name]/callback_start_timestamp","title":"variable_passing_records()"},{"location":"infra/#caret_analyze.infra.lttng.bridge","text":"","title":"bridge"},{"location":"infra/#caret_analyze.infra.lttng.bridge.LttngBridge","text":"","title":"LttngBridge"},{"location":"infra/#caret_analyze.infra.lttng.bridge.LttngBridge.get_ipc_buffer","text":"Get publisher handles. Parameters: Name Type Description Default node_name str required topic_name str required Returns: Type Description List [ PublisherValueLttng ] publisher values that matches the condition","title":"get_ipc_buffer()"},{"location":"infra/#caret_analyze.infra.lttng.bridge.LttngBridge.get_publishers","text":"Get publisher handles. Parameters: Name Type Description Default node_name str required topic_name str required Returns: Type Description List [ PublisherValueLttng ] publisher values that matches the condition","title":"get_publishers()"},{"location":"infra/#caret_analyze.infra.lttng.bridge.LttngBridge.get_subscription_callback","text":"Get subscription callback value with the same conditions. used conditions: - node name - callback type - subscription topic name - publish topic names Parameters: Name Type Description Default callback SubscriptionCallbackStructValue Callback value to be searched. required Returns: Type Description SubscriptionCallbackValueLttng Timer callback value, including runtime information. Raises: Type Description ItemNotFoundError No value matching the search condition is found. MultipleItemFoundError Multiple pieces of values matching the search condition are found.","title":"get_subscription_callback()"},{"location":"infra/#caret_analyze.infra.lttng.bridge.LttngBridge.get_timer_callback","text":"Compare timer callback value with the same conditions. used conditions: - node name - callback type - period_ns - publish topic names Parameters: Name Type Description Default callback TimerCallbackStructValue Callback value to be searched. required Returns: Type Description [ TimerCallbackValueLttng ] Timer callback value, including runtime information. Raises: Type Description ItemNotFoundError No value matching the search condition is found. MultipleItemFoundError Multiple pieces of values matching the search condition are found.","title":"get_timer_callback()"},{"location":"infra/#caret_analyze.infra.lttng.lttng","text":"","title":"lttng"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng","text":"Bases: InfraBase Lttng data container class. This class is a singleton in order to retain information. The main processing is done by LttngInfo and RecordsSource.","title":"Lttng"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_callback_groups","text":"Get callback group information. Returns: Type Description Sequence [ CallbackGroupValue ]","title":"get_callback_groups()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_executors","text":"Get executors information. Returns: Type Description Sequence [ ExecutorInfo ]","title":"get_executors()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_inter_proc_comm_records","text":"Compose inter process communication records of all communications in one records. Returns: Type Description RecordsInterface columns - callback_object - callback_start_timestamp - publisher_handle - rclcpp_publish_timestamp - rcl_publish_timestamp (Optional) - dds_write_timestamp (Optional)","title":"get_inter_proc_comm_records()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_intra_proc_comm_records","text":"Compose inter process communication records of all communications in one records. Returns: Type Description RecordsInterface columns - callback_object - callback_start_timestamp - publisher_handle - rclcpp_publish_timestamp - rcl_publish_timestamp (Optional) - dds_write_timestamp (Optional)","title":"get_intra_proc_comm_records()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_nodes","text":"Get nodes. Returns: Type Description Sequence [ NodeValue ] nodes info.","title":"get_nodes()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_publisher_qos","text":"Get publisher qos. Parameters: Name Type Description Default pub PublisherValueLttng target publisher required Returns: Type Description Qos","title":"get_publisher_qos()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_publishers","text":"Get publishers information. Parameters: Name Type Description Default node NodeValue target node. required Returns: Type Description Sequence [ PublisherInfoLttng ]","title":"get_publishers()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_rmw_impl","text":"Get rmw implementation. Returns: Type Description str rmw_implementation","title":"get_rmw_impl()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_subscription_callbacks","text":"Get subscription callbacks infomation. Parameters: Name Type Description Default node NodeValue target node name. required Returns: Type Description Sequence [ SubscriptionCallbackInfoLttng ]","title":"get_subscription_callbacks()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_subscription_qos","text":"Get subscription qos. Parameters: Name Type Description Default sub SubscriptionValueLttng target subscription required Returns: Type Description Qos","title":"get_subscription_qos()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_subscriptions","text":"Get subscriptions information. Parameters: Name Type Description Default node NodeValue target node. required Returns: Type Description Sequence [ SubscriptionInfoLttng ]","title":"get_subscriptions()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_timer_callbacks","text":"Get timer callback values. Parameters: Name Type Description Default node NodeValue target node name. required Returns: Type Description Sequence [ TimerCallbackInfoLttng ]","title":"get_timer_callbacks()"},{"location":"infra/#caret_analyze.infra.lttng.lttng.Lttng.get_timers","text":"Get timers information. Returns: Type Description Sequence [ TimerValue ]","title":"get_timers()"},{"location":"infra/#caret_analyze.infra.lttng.lttng_info","text":"","title":"lttng_info"},{"location":"infra/#caret_analyze.infra.lttng.lttng_info.DataFrameFormatted","text":"","title":"DataFrameFormatted"},{"location":"infra/#caret_analyze.infra.lttng.lttng_info.DataFrameFormatted.callback_groups_df","text":"Get callback group info table. Returns: Type Description pd . DataFrame Columns - callback_group_addr - executor_addr - group_type_name","title":"callback_groups_df()"},{"location":"infra/#caret_analyze.infra.lttng.lttng_info.DataFrameFormatted.executor_df","text":"Get executor info table. Returns: Type Description pd . DataFrame Columns - executor_addr - executor_type_name","title":"executor_df()"},{"location":"infra/#caret_analyze.infra.lttng.lttng_info.DataFrameFormatted.nodes_df","text":"Build node table. Parameters: Name Type Description Default data Ros2DataModel required Returns: Type Description pd . DataFrame Columns - node_handle - node_name","title":"nodes_df()"},{"location":"infra/#caret_analyze.infra.lttng.lttng_info.DataFrameFormatted.publishers_df","text":"Get publisher info table. Returns: Type Description pd . DataFrame Columns - publisher_handle - node_handle - topic_name - depth","title":"publishers_df()"},{"location":"infra/#caret_analyze.infra.lttng.lttng_info.DataFrameFormatted.service_callbacks_df","text":"Get service info table. Returns: Type Description pd . DataFrame Columns - callback_id - callback_object - node_handle - service_handle - callback_group_addr - service_name - symbol","title":"service_callbacks_df()"},{"location":"infra/#caret_analyze.infra.lttng.lttng_info.DataFrameFormatted.subscription_callbacks_df","text":"Build subscription callback table. Parameters: Name Type Description Default data Ros2DataModel required Returns: Type Description pd . DataFrame columns - callback_object - callback_object_intra - node_handle - subscription_handle - callback_group_addr - topic_name - symbol - callback_id - depth","title":"subscription_callbacks_df()"},{"location":"infra/#caret_analyze.infra.lttng.lttng_info.DataFrameFormatted.tilde_publishers_df","text":"Get tilde wrapped publisher. Returns: Type Description pd . DataFrame Columns - tilde_publisher - node_name - topic_name","title":"tilde_publishers_df()"},{"location":"infra/#caret_analyze.infra.lttng.lttng_info.DataFrameFormatted.tilde_subscriptions_df","text":"Get tilde wrapped subscription. Returns: Type Description pd . DataFrame Columns - tilde_subscription - node_name - topic_name","title":"tilde_subscriptions_df()"},{"location":"infra/#caret_analyze.infra.lttng.lttng_info.DataFrameFormatted.timer_callbacks_df","text":"Build timer callbacks table. Parameters: Name Type Description Default data Ros2DataModel required Returns: Type Description pd . DataFrame Column - callback_object - node_handle - timer_handle - callback_group_addr - period_ns, - symbol - callback_id","title":"timer_callbacks_df()"},{"location":"infra/#caret_analyze.infra.lttng.lttng_info.LttngInfo","text":"","title":"LttngInfo"},{"location":"infra/#caret_analyze.infra.lttng.lttng_info.LttngInfo.get_callback_groups","text":"Get callback groups value. Returns: Type Description List [ CallbackGroupInfo ]","title":"get_callback_groups()"},{"location":"infra/#caret_analyze.infra.lttng.lttng_info.LttngInfo.get_executors","text":"Get executors information. Returns: Type Description List [ ExecutorInfo ]","title":"get_executors()"},{"location":"infra/#caret_analyze.infra.lttng.lttng_info.LttngInfo.get_nodes","text":"Get node name list. Returns: Type Description Sequence [ NodeValue ] node names.","title":"get_nodes()"},{"location":"infra/#caret_analyze.infra.lttng.lttng_info.LttngInfo.get_publishers","text":"Get publishers information. Parameters: Name Type Description Default node NodeValue target node. required Returns: Type Description List [ PublisherInfo ]","title":"get_publishers()"},{"location":"infra/#caret_analyze.infra.lttng.lttng_info.LttngInfo.get_rmw_impl","text":"Get rmw implementation. Returns: Type Description str rmw_implementation","title":"get_rmw_impl()"},{"location":"infra/#caret_analyze.infra.lttng.lttng_info.LttngInfo.get_subscription_callbacks","text":"Get subscription callbacks infomation. Parameters: Name Type Description Default node_name str target node name. required Returns: Type Description Sequence [ SubscriptionCallbackInfo ]","title":"get_subscription_callbacks()"},{"location":"infra/#caret_analyze.infra.lttng.lttng_info.LttngInfo.get_timer_callbacks","text":"Get timer callbacks information. Parameters: Name Type Description Default node_name str target node name. required Returns: Type Description Sequence [ TimerCallbackInfo ]","title":"get_timer_callbacks()"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng","text":"","title":"records_provider_lttng"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng","text":"Bases: RuntimeDataProvider Records are processed and measurement results are calculated. In addition to merging, filtering and other operations are performed here.","title":"RecordsProviderLttng"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.callback_records","text":"Return callback duration records. Parameters: Name Type Description Default callback_val CallbackStructValue target callback value. required Returns: Type Description RecordsInterface Columns - [callback_name]/callback_start_timestamp - [callback_name]/callback_end_timestamp","title":"callback_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.communication_records","text":"Provide communication records. Parameters: Name Type Description Default comm_info CommunicationStructInfo communicadtion info. required Returns: Type Description RecordsInterface Columns: - [topic_name]/rclcpp_publish_timestamp - [topic_name]/rcl_publish_timestamp (Optional) - [topic_name]/dds_publish_timestamp (Optional) - [callback_name]/callback_start_timestamp","title":"communication_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.publish_records","text":"Return publish records. Parameters: Name Type Description Default publish PublisherStructValue target publisher required Returns: Type Description RecordsInterface Columns - [topic_name]/rclcpp_publish_timestamp - [topic_name]/rclcpp_intra_publish_timestamp (Optional) - [topic_name]/rclcpp_inter_publish_timestamp (Optional) - [topic_name]/rcl_publish_timestamp (Optional) - [topic_name]/dds_write_timestamp (Optional) - [topic_name]/message_timestamp - [topic_name]/source_timestamp (Optional) [topic_name]/tilde_publish_timestamp (Optional) [topic_name]/tilde_message_id (Optional)","title":"publish_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.subscribe_records","text":"Provide subscription records. Parameters: Name Type Description Default subscription_value SubscriptionStructValue Target subscription value. required Returns: Type Description RecordsInterface Columns - [callback_name]/callback_start_timestamp - [topic_name]/message_timestamp - [topic_name]/source_timestamp Raises: Type Description InvalidArgumentError","title":"subscribe_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.tf_broadcast_records","text":"Compose transform broadcast records. Parameters: Name Type Description Default broadcaster TransformBroadcasterStructValue target bradcaster required transform Optional [ TransformValue ] target transform required Returns: Type Description RecordsInterface Columns - frame_id - child_frame_id - same as publlish records","title":"tf_broadcast_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.timer_records","text":"Return timer records. Parameters: Name Type Description Default timer TimerStructValue [description] required Returns: Type Description RecordsInterface Columns - [callback_name]/timer_event - [callback_name]/callback_start - [callback_name]/callback_end","title":"timer_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_provider_lttng.RecordsProviderLttng.variable_passing_records","text":"Return variable passing records. Parameters: Name Type Description Default variable_passing_info VariablePassingStructInfo target variable passing info. required Returns: Type Description RecordsInterface Columns - [callback_name]/callback_end_timestamp - [callback_name]/callback_start_timestamp","title":"variable_passing_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_source","text":"","title":"records_source"},{"location":"infra/#caret_analyze.infra.lttng.records_source.RecordsSource","text":"","title":"RecordsSource"},{"location":"infra/#caret_analyze.infra.lttng.records_source.records_source.RecordsSource.callback_records","text":"Compose callback records. Used tracepoints - callback_start - callback_end Returns: Type Description RecordsInterface columns: - callback_start_timestamp - callback_end_timestamp - callback_object","title":"callback_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_source.records_source.RecordsSource.intra_proc_comm_records","text":"Compose intra process communication records. Used tracepoints - dispatch_intra_process_subscription_callback - rclcpp_publish - message_construct - callback_start Returns: Type Description RecordsInterface columns: - callback_object - callback_start_timestamp - publisher_handle - rclcpp_publish_timestamp - message_timestamp","title":"intra_proc_comm_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_source.records_source","text":"","title":"records_source"},{"location":"infra/#caret_analyze.infra.lttng.records_source.records_source.RecordsSource","text":"","title":"RecordsSource"},{"location":"infra/#caret_analyze.infra.lttng.records_source.records_source.RecordsSource.callback_records","text":"Compose callback records. Used tracepoints - callback_start - callback_end Returns: Type Description RecordsInterface columns: - callback_start_timestamp - callback_end_timestamp - callback_object","title":"callback_records()"},{"location":"infra/#caret_analyze.infra.lttng.records_source.records_source.RecordsSource.intra_proc_comm_records","text":"Compose intra process communication records. Used tracepoints - dispatch_intra_process_subscription_callback - rclcpp_publish - message_construct - callback_start Returns: Type Description RecordsInterface columns: - callback_object - callback_start_timestamp - publisher_handle - rclcpp_publish_timestamp - message_timestamp","title":"intra_proc_comm_records()"},{"location":"infra/#caret_analyze.infra.lttng.ros2_tracing","text":"","title":"ros2_tracing"},{"location":"infra/#caret_analyze.infra.lttng.ros2_tracing.Ros2DataModel","text":"Bases: DataModel Container to model pre-processed ROS 2 data for analysis. This aims to represent the data in a ROS 2-aware way.","title":"Ros2DataModel"},{"location":"infra/#caret_analyze.infra.lttng.ros2_tracing.data_model.Ros2DataModel.__init__","text":"Create a Ros2DataModel.","title":"__init__()"},{"location":"infra/#caret_analyze.infra.lttng.ros2_tracing.Ros2Handler","text":"Bases: EventHandler ROS 2-aware event handling class implementation. Handles a trace's events and builds a model with the data.","title":"Ros2Handler"},{"location":"infra/#caret_analyze.infra.lttng.ros2_tracing.processor.Ros2Handler.__init__","text":"Create a Ros2Handler.","title":"__init__()"},{"location":"infra/#caret_analyze.infra.lttng.ros2_tracing.data_model","text":"Module for ROS 2 data model.","title":"data_model"},{"location":"infra/#caret_analyze.infra.lttng.ros2_tracing.data_model.Ros2DataModel","text":"Bases: DataModel Container to model pre-processed ROS 2 data for analysis. This aims to represent the data in a ROS 2-aware way.","title":"Ros2DataModel"},{"location":"infra/#caret_analyze.infra.lttng.ros2_tracing.data_model.Ros2DataModel.__init__","text":"Create a Ros2DataModel.","title":"__init__()"},{"location":"infra/#caret_analyze.infra.lttng.ros2_tracing.processor","text":"Module for trace events processor and ROS 2 model creation.","title":"processor"},{"location":"infra/#caret_analyze.infra.lttng.ros2_tracing.processor.Ros2Handler","text":"Bases: EventHandler ROS 2-aware event handling class implementation. Handles a trace's events and builds a model with the data.","title":"Ros2Handler"},{"location":"infra/#caret_analyze.infra.lttng.ros2_tracing.processor.Ros2Handler.__init__","text":"Create a Ros2Handler.","title":"__init__()"},{"location":"plot/","text":"","title":"Plot"},{"location":"record/","text":"RecordInterface # Interface for Record class. This behavior is similar to the dictionary type. To avoid conflicts with the pybind metaclass, ABC is not used. add ( key , stamp ) abstractmethod # Add(Update) column value. Parameters: Name Type Description Default key str key name to set. required stamp int key value to set. required change_dict_key ( old_key , new_key ) abstractmethod # Change columns name. Parameters: Name Type Description Default old_key str column name to be changed. required new_key str new column name. required columns () abstractmethod property # Get columnnames. Returns: Type Description Set [ str ] Column names. data () abstractmethod property # Convert to dictionary. Returns: Name Type Description data Dict [ str , int ] dictionary data. drop_columns ( column_names ) abstractmethod # Drop columns method. Parameters: Name Type Description Default column_names List [ str ] columns to be dropped. required equals ( other ) abstractmethod # Compare record. Parameters: Name Type Description Default other RecordInterface comparison target. required Returns: Type Description bool True if record data is same, otherwise false. get ( key ) abstractmethod # Get value for specific column. Parameters: Name Type Description Default key str key name to get. required Returns: Type Description int Value for selected key. get_with_default ( key , v ) abstractmethod # Get value for specific column. Parameters: Name Type Description Default key str key name to get. required v int default value. required Returns: Type Description int Value for selected key. merge ( other ) abstractmethod # Mege record. Parameters: Name Type Description Default other RecordInterface merge target. required inplace bool inplace record if true, otherwise false. required Returns: Type Description Record Merged record class if inplace = false, otherwise None. RecordsInterface # Interface for Record class. To avoid conflicts with the pybind metaclass, ABC is not used. append ( other ) abstractmethod # Append new record. Parameters: Name Type Description Default other RecordInterface record to be added. required append_column ( column , values ) abstractmethod # Append column to records. Parameters: Name Type Description Default column Column required values List [ int ] required bind_drop_as_delay () abstractmethod # Convert the dropped points to records converted as delay. clone () abstractmethod # Get duplicated records. Returns: Type Description RecordsInterface deep-copyed records. column_names () abstractmethod property # Get column names. Returns: Type Description List [ str ] column names. columns () abstractmethod property # Get columns. Returns: Type Description Columns concat ( other ) abstractmethod # Concat records. Parameters: Name Type Description Default other RecordsInterface records to be concatenated. required Returns: Type Description RecordsInterface concatenated records if inplace=False, otherwise None. data () abstractmethod property # Get records list. Returns: Type Description Seque [ RecordInterface ] Records list. equals ( other ) abstractmethod # Equals method. Parameters: Name Type Description Default other RecordsInterface comparison target. required Returns: Type Description bool true if record data is same, otherwise false. filter_if ( f ) abstractmethod # Get filterd records. Parameters: Name Type Description Default f Callable [[ RecordInterface ], bool ] condition function. required inplace bool inplace original instance if true. required groupby ( column_names ) abstractmethod # Split based on the value of the given column name. merge ( right_records , join_left_key , join_right_key , how , * , progress_label = None ) abstractmethod # Merge records by key match. Parameters: Name Type Description Default right_records RecordInterface merge target. required join_left_key str Key to use for matching. required join_right_key str Key to use for matching. required how str merge type. [inner/right/left/outer] required progress_label str label for progress bar. cpp impl only. None Returns: Type Description RecordsInterface Example # left_records = Records([ Record({'join_key': 1, 'left_other': 1}), Record({'join_key': 2, 'left_other': 2}), ]) right_records = Records([ Record({'join_key': 2, 'right_other': 3}), Record({'join_key': 1, 'right_other': 4}), ]) expected = Records([ Record({'join_key': 1, 'left_other': 1, 'right_other': 4}), Record({'join_key': 2, 'left_other': 2, 'right_other': 3}), ]) left_records.merge(right_records, 'join_key').equals(expected) True merge_sequencial ( right_records , left_stamp_key , right_stamp_key , join_left_key , join_right_key , how , * , progress_label = None ) abstractmethod # Merge chronologically contiguous records. Merge left_records[left_key] and the right_records[right_key] that occurred immediately after it. If join_key is set, left_records[join_key]==right_records[join_key] is added as condition. Parameters: Name Type Description Default right_records RecordsInterface merge target. required left_stamp_key str left records key name to use for comparison in time series merge. required right_stamp_key str right records key name to use for comparison in time series merge. required join_key str join key name to use equal condition. required how str merge type. [inner/right/left/outer] required progress_label str label for progress bar. cpp impl only. None Records # RecordsInterface Merged records. Example # left_records = Records([ Record({'join_key': 1, 'left_stamp_key': 0}), Record({'join_key': 2, 'left_stamp_key': 3}) ]) right_records = Records([ Record({'join_key': 2, 'right_stamp_key': 5}), Record({'join_key': 1, 'right_stamp_key': 6}) ]) expected = Records([ Record({'join_key': 1, 'left_stamp_key': 0, 'right_stamp_key': 6}), Record({'join_key': 2, 'left_stamp_key': 3, 'right_stamp_key': 5}), ]) left_records.merge_sequencial( right_records, 'left_stamp_key', 'right_stamp_key', 'join_key', 'inner' ).equals(expected) True merge_sequencial_for_addr_track ( source_stamp_key , source_key , copy_records , copy_stamp_key , copy_from_key , copy_to_key , sink_records , sink_stamp_key , sink_from_key , * , progress_label = None ) abstractmethod # Merge for tracking addresses when copying occurs. Parameters: Name Type Description Default source_stamp_key str key name indicating time stamp for source records required source_key str Key name indicating the address of the copy source for source records. required copy_records Recordsinterface copy records required copy_stamp_key str key name indicating time stamp for copy records required copy_from_key str Key name indicating the address of the copy source for source records. required copy_to_key str Key name indicating the address of the copy destination required sink_records RecordsInterface sink-side records required sink_stamp_key str keyname indicating time stamp for copy records required sink_from_key str Key name indicating the address of the copy destination required progress_label str label for progress bar. cpp impl only. None Returns: Type Description RecordsInterface Merged records. Examples: >>> source_records = Records ([ Record({'source_key': 1, 'source_stamp': 0}), ]) >>> copy_records = Records ([ Record({'copy_from_key': 1, 'copy_to_key': 11, 'copy_stamp_key': 1}) ]) >>> sink_records = Records ([ Record({'sink_from_key': 11, 'sink_stamp': 2}), Record({'sink_from_key': 1, 'sink_stamp': 3}), ]) >>> expected = Records ([ Record({'source_stamp':0, 'sink_stamp':3, 'source_key':1}), Record({'source_stamp':0, 'sink_stamp':2, 'source_key':1}), ]) >>> source_records . merge_sequencial_for_addr_track ( 'source_stamp', 'source_key', copy_records, 'copy_stamp_key', 'copy_from_key', 'copy_to_key', sink_records, 'sink_stamp', 'sink_from_key' ).equals(expected) True sort ( key , ascending = True ) abstractmethod # Sort records. Parameters: Name Type Description Default key Union [ str , List [ str ]] key name to used for sort. required ascending bool ascending if True, descending if false. True to_dataframe ( converter = None ) abstractmethod # Convert to pandas dataframe. Returns: Type Description pandas . DataFrame Records data. interface # RecordInterface # Interface for Record class. This behavior is similar to the dictionary type. To avoid conflicts with the pybind metaclass, ABC is not used. add ( key , stamp ) abstractmethod # Add(Update) column value. Parameters: Name Type Description Default key str key name to set. required stamp int key value to set. required change_dict_key ( old_key , new_key ) abstractmethod # Change columns name. Parameters: Name Type Description Default old_key str column name to be changed. required new_key str new column name. required columns () abstractmethod property # Get columnnames. Returns: Type Description Set [ str ] Column names. data () abstractmethod property # Convert to dictionary. Returns: Name Type Description data Dict [ str , int ] dictionary data. drop_columns ( column_names ) abstractmethod # Drop columns method. Parameters: Name Type Description Default column_names List [ str ] columns to be dropped. required equals ( other ) abstractmethod # Compare record. Parameters: Name Type Description Default other RecordInterface comparison target. required Returns: Type Description bool True if record data is same, otherwise false. get ( key ) abstractmethod # Get value for specific column. Parameters: Name Type Description Default key str key name to get. required Returns: Type Description int Value for selected key. get_with_default ( key , v ) abstractmethod # Get value for specific column. Parameters: Name Type Description Default key str key name to get. required v int default value. required Returns: Type Description int Value for selected key. merge ( other ) abstractmethod # Mege record. Parameters: Name Type Description Default other RecordInterface merge target. required inplace bool inplace record if true, otherwise false. required Returns: Type Description Record Merged record class if inplace = false, otherwise None. RecordsInterface # Interface for Record class. To avoid conflicts with the pybind metaclass, ABC is not used. append ( other ) abstractmethod # Append new record. Parameters: Name Type Description Default other RecordInterface record to be added. required append_column ( column , values ) abstractmethod # Append column to records. Parameters: Name Type Description Default column Column required values List [ int ] required bind_drop_as_delay () abstractmethod # Convert the dropped points to records converted as delay. clone () abstractmethod # Get duplicated records. Returns: Type Description RecordsInterface deep-copyed records. column_names () abstractmethod property # Get column names. Returns: Type Description List [ str ] column names. columns () abstractmethod property # Get columns. Returns: Type Description Columns concat ( other ) abstractmethod # Concat records. Parameters: Name Type Description Default other RecordsInterface records to be concatenated. required Returns: Type Description RecordsInterface concatenated records if inplace=False, otherwise None. data () abstractmethod property # Get records list. Returns: Type Description Seque [ RecordInterface ] Records list. equals ( other ) abstractmethod # Equals method. Parameters: Name Type Description Default other RecordsInterface comparison target. required Returns: Type Description bool true if record data is same, otherwise false. filter_if ( f ) abstractmethod # Get filterd records. Parameters: Name Type Description Default f Callable [[ RecordInterface ], bool ] condition function. required inplace bool inplace original instance if true. required groupby ( column_names ) abstractmethod # Split based on the value of the given column name. merge ( right_records , join_left_key , join_right_key , how , * , progress_label = None ) abstractmethod # Merge records by key match. Parameters: Name Type Description Default right_records RecordInterface merge target. required join_left_key str Key to use for matching. required join_right_key str Key to use for matching. required how str merge type. [inner/right/left/outer] required progress_label str label for progress bar. cpp impl only. None Returns: Type Description RecordsInterface Example # left_records = Records([ Record({'join_key': 1, 'left_other': 1}), Record({'join_key': 2, 'left_other': 2}), ]) right_records = Records([ Record({'join_key': 2, 'right_other': 3}), Record({'join_key': 1, 'right_other': 4}), ]) expected = Records([ Record({'join_key': 1, 'left_other': 1, 'right_other': 4}), Record({'join_key': 2, 'left_other': 2, 'right_other': 3}), ]) left_records.merge(right_records, 'join_key').equals(expected) True merge_sequencial ( right_records , left_stamp_key , right_stamp_key , join_left_key , join_right_key , how , * , progress_label = None ) abstractmethod # Merge chronologically contiguous records. Merge left_records[left_key] and the right_records[right_key] that occurred immediately after it. If join_key is set, left_records[join_key]==right_records[join_key] is added as condition. Parameters: Name Type Description Default right_records RecordsInterface merge target. required left_stamp_key str left records key name to use for comparison in time series merge. required right_stamp_key str right records key name to use for comparison in time series merge. required join_key str join key name to use equal condition. required how str merge type. [inner/right/left/outer] required progress_label str label for progress bar. cpp impl only. None Records # RecordsInterface Merged records. Example # left_records = Records([ Record({'join_key': 1, 'left_stamp_key': 0}), Record({'join_key': 2, 'left_stamp_key': 3}) ]) right_records = Records([ Record({'join_key': 2, 'right_stamp_key': 5}), Record({'join_key': 1, 'right_stamp_key': 6}) ]) expected = Records([ Record({'join_key': 1, 'left_stamp_key': 0, 'right_stamp_key': 6}), Record({'join_key': 2, 'left_stamp_key': 3, 'right_stamp_key': 5}), ]) left_records.merge_sequencial( right_records, 'left_stamp_key', 'right_stamp_key', 'join_key', 'inner' ).equals(expected) True merge_sequencial_for_addr_track ( source_stamp_key , source_key , copy_records , copy_stamp_key , copy_from_key , copy_to_key , sink_records , sink_stamp_key , sink_from_key , * , progress_label = None ) abstractmethod # Merge for tracking addresses when copying occurs. Parameters: Name Type Description Default source_stamp_key str key name indicating time stamp for source records required source_key str Key name indicating the address of the copy source for source records. required copy_records Recordsinterface copy records required copy_stamp_key str key name indicating time stamp for copy records required copy_from_key str Key name indicating the address of the copy source for source records. required copy_to_key str Key name indicating the address of the copy destination required sink_records RecordsInterface sink-side records required sink_stamp_key str keyname indicating time stamp for copy records required sink_from_key str Key name indicating the address of the copy destination required progress_label str label for progress bar. cpp impl only. None Returns: Type Description RecordsInterface Merged records. Examples: >>> source_records = Records ([ Record({'source_key': 1, 'source_stamp': 0}), ]) >>> copy_records = Records ([ Record({'copy_from_key': 1, 'copy_to_key': 11, 'copy_stamp_key': 1}) ]) >>> sink_records = Records ([ Record({'sink_from_key': 11, 'sink_stamp': 2}), Record({'sink_from_key': 1, 'sink_stamp': 3}), ]) >>> expected = Records ([ Record({'source_stamp':0, 'sink_stamp':3, 'source_key':1}), Record({'source_stamp':0, 'sink_stamp':2, 'source_key':1}), ]) >>> source_records . merge_sequencial_for_addr_track ( 'source_stamp', 'source_key', copy_records, 'copy_stamp_key', 'copy_from_key', 'copy_to_key', sink_records, 'sink_stamp', 'sink_from_key' ).equals(expected) True sort ( key , ascending = True ) abstractmethod # Sort records. Parameters: Name Type Description Default key Union [ str , List [ str ]] key name to used for sort. required ascending bool ascending if True, descending if false. True to_dataframe ( converter = None ) abstractmethod # Convert to pandas dataframe. Returns: Type Description pandas . DataFrame Records data. record #","title":"Record"},{"location":"record/#caret_analyze.record.RecordInterface","text":"Interface for Record class. This behavior is similar to the dictionary type. To avoid conflicts with the pybind metaclass, ABC is not used.","title":"RecordInterface"},{"location":"record/#caret_analyze.record.interface.RecordInterface.add","text":"Add(Update) column value. Parameters: Name Type Description Default key str key name to set. required stamp int key value to set. required","title":"add()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.change_dict_key","text":"Change columns name. Parameters: Name Type Description Default old_key str column name to be changed. required new_key str new column name. required","title":"change_dict_key()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.columns","text":"Get columnnames. Returns: Type Description Set [ str ] Column names.","title":"columns()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.data","text":"Convert to dictionary. Returns: Name Type Description data Dict [ str , int ] dictionary data.","title":"data()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.drop_columns","text":"Drop columns method. Parameters: Name Type Description Default column_names List [ str ] columns to be dropped. required","title":"drop_columns()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.equals","text":"Compare record. Parameters: Name Type Description Default other RecordInterface comparison target. required Returns: Type Description bool True if record data is same, otherwise false.","title":"equals()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.get","text":"Get value for specific column. Parameters: Name Type Description Default key str key name to get. required Returns: Type Description int Value for selected key.","title":"get()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.get_with_default","text":"Get value for specific column. Parameters: Name Type Description Default key str key name to get. required v int default value. required Returns: Type Description int Value for selected key.","title":"get_with_default()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.merge","text":"Mege record. Parameters: Name Type Description Default other RecordInterface merge target. required inplace bool inplace record if true, otherwise false. required Returns: Type Description Record Merged record class if inplace = false, otherwise None.","title":"merge()"},{"location":"record/#caret_analyze.record.RecordsInterface","text":"Interface for Record class. To avoid conflicts with the pybind metaclass, ABC is not used.","title":"RecordsInterface"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.append","text":"Append new record. Parameters: Name Type Description Default other RecordInterface record to be added. required","title":"append()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.append_column","text":"Append column to records. Parameters: Name Type Description Default column Column required values List [ int ] required","title":"append_column()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.bind_drop_as_delay","text":"Convert the dropped points to records converted as delay.","title":"bind_drop_as_delay()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.clone","text":"Get duplicated records. Returns: Type Description RecordsInterface deep-copyed records.","title":"clone()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.column_names","text":"Get column names. Returns: Type Description List [ str ] column names.","title":"column_names()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.columns","text":"Get columns. Returns: Type Description Columns","title":"columns()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.concat","text":"Concat records. Parameters: Name Type Description Default other RecordsInterface records to be concatenated. required Returns: Type Description RecordsInterface concatenated records if inplace=False, otherwise None.","title":"concat()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.data","text":"Get records list. Returns: Type Description Seque [ RecordInterface ] Records list.","title":"data()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.equals","text":"Equals method. Parameters: Name Type Description Default other RecordsInterface comparison target. required Returns: Type Description bool true if record data is same, otherwise false.","title":"equals()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.filter_if","text":"Get filterd records. Parameters: Name Type Description Default f Callable [[ RecordInterface ], bool ] condition function. required inplace bool inplace original instance if true. required","title":"filter_if()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.groupby","text":"Split based on the value of the given column name.","title":"groupby()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge","text":"Merge records by key match. Parameters: Name Type Description Default right_records RecordInterface merge target. required join_left_key str Key to use for matching. required join_right_key str Key to use for matching. required how str merge type. [inner/right/left/outer] required progress_label str label for progress bar. cpp impl only. None Returns: Type Description RecordsInterface","title":"merge()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge--example","text":"left_records = Records([ Record({'join_key': 1, 'left_other': 1}), Record({'join_key': 2, 'left_other': 2}), ]) right_records = Records([ Record({'join_key': 2, 'right_other': 3}), Record({'join_key': 1, 'right_other': 4}), ]) expected = Records([ Record({'join_key': 1, 'left_other': 1, 'right_other': 4}), Record({'join_key': 2, 'left_other': 2, 'right_other': 3}), ]) left_records.merge(right_records, 'join_key').equals(expected) True","title":"Example"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge_sequencial","text":"Merge chronologically contiguous records. Merge left_records[left_key] and the right_records[right_key] that occurred immediately after it. If join_key is set, left_records[join_key]==right_records[join_key] is added as condition. Parameters: Name Type Description Default right_records RecordsInterface merge target. required left_stamp_key str left records key name to use for comparison in time series merge. required right_stamp_key str right records key name to use for comparison in time series merge. required join_key str join key name to use equal condition. required how str merge type. [inner/right/left/outer] required progress_label str label for progress bar. cpp impl only. None","title":"merge_sequencial()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge_sequencial--records","text":"RecordsInterface Merged records.","title":"Records"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge_sequencial--example","text":"left_records = Records([ Record({'join_key': 1, 'left_stamp_key': 0}), Record({'join_key': 2, 'left_stamp_key': 3}) ]) right_records = Records([ Record({'join_key': 2, 'right_stamp_key': 5}), Record({'join_key': 1, 'right_stamp_key': 6}) ]) expected = Records([ Record({'join_key': 1, 'left_stamp_key': 0, 'right_stamp_key': 6}), Record({'join_key': 2, 'left_stamp_key': 3, 'right_stamp_key': 5}), ]) left_records.merge_sequencial( right_records, 'left_stamp_key', 'right_stamp_key', 'join_key', 'inner' ).equals(expected) True","title":"Example"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge_sequencial_for_addr_track","text":"Merge for tracking addresses when copying occurs. Parameters: Name Type Description Default source_stamp_key str key name indicating time stamp for source records required source_key str Key name indicating the address of the copy source for source records. required copy_records Recordsinterface copy records required copy_stamp_key str key name indicating time stamp for copy records required copy_from_key str Key name indicating the address of the copy source for source records. required copy_to_key str Key name indicating the address of the copy destination required sink_records RecordsInterface sink-side records required sink_stamp_key str keyname indicating time stamp for copy records required sink_from_key str Key name indicating the address of the copy destination required progress_label str label for progress bar. cpp impl only. None Returns: Type Description RecordsInterface Merged records. Examples: >>> source_records = Records ([ Record({'source_key': 1, 'source_stamp': 0}), ]) >>> copy_records = Records ([ Record({'copy_from_key': 1, 'copy_to_key': 11, 'copy_stamp_key': 1}) ]) >>> sink_records = Records ([ Record({'sink_from_key': 11, 'sink_stamp': 2}), Record({'sink_from_key': 1, 'sink_stamp': 3}), ]) >>> expected = Records ([ Record({'source_stamp':0, 'sink_stamp':3, 'source_key':1}), Record({'source_stamp':0, 'sink_stamp':2, 'source_key':1}), ]) >>> source_records . merge_sequencial_for_addr_track ( 'source_stamp', 'source_key', copy_records, 'copy_stamp_key', 'copy_from_key', 'copy_to_key', sink_records, 'sink_stamp', 'sink_from_key' ).equals(expected) True","title":"merge_sequencial_for_addr_track()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.sort","text":"Sort records. Parameters: Name Type Description Default key Union [ str , List [ str ]] key name to used for sort. required ascending bool ascending if True, descending if false. True","title":"sort()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.to_dataframe","text":"Convert to pandas dataframe. Returns: Type Description pandas . DataFrame Records data.","title":"to_dataframe()"},{"location":"record/#caret_analyze.record.interface","text":"","title":"interface"},{"location":"record/#caret_analyze.record.interface.RecordInterface","text":"Interface for Record class. This behavior is similar to the dictionary type. To avoid conflicts with the pybind metaclass, ABC is not used.","title":"RecordInterface"},{"location":"record/#caret_analyze.record.interface.RecordInterface.add","text":"Add(Update) column value. Parameters: Name Type Description Default key str key name to set. required stamp int key value to set. required","title":"add()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.change_dict_key","text":"Change columns name. Parameters: Name Type Description Default old_key str column name to be changed. required new_key str new column name. required","title":"change_dict_key()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.columns","text":"Get columnnames. Returns: Type Description Set [ str ] Column names.","title":"columns()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.data","text":"Convert to dictionary. Returns: Name Type Description data Dict [ str , int ] dictionary data.","title":"data()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.drop_columns","text":"Drop columns method. Parameters: Name Type Description Default column_names List [ str ] columns to be dropped. required","title":"drop_columns()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.equals","text":"Compare record. Parameters: Name Type Description Default other RecordInterface comparison target. required Returns: Type Description bool True if record data is same, otherwise false.","title":"equals()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.get","text":"Get value for specific column. Parameters: Name Type Description Default key str key name to get. required Returns: Type Description int Value for selected key.","title":"get()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.get_with_default","text":"Get value for specific column. Parameters: Name Type Description Default key str key name to get. required v int default value. required Returns: Type Description int Value for selected key.","title":"get_with_default()"},{"location":"record/#caret_analyze.record.interface.RecordInterface.merge","text":"Mege record. Parameters: Name Type Description Default other RecordInterface merge target. required inplace bool inplace record if true, otherwise false. required Returns: Type Description Record Merged record class if inplace = false, otherwise None.","title":"merge()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface","text":"Interface for Record class. To avoid conflicts with the pybind metaclass, ABC is not used.","title":"RecordsInterface"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.append","text":"Append new record. Parameters: Name Type Description Default other RecordInterface record to be added. required","title":"append()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.append_column","text":"Append column to records. Parameters: Name Type Description Default column Column required values List [ int ] required","title":"append_column()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.bind_drop_as_delay","text":"Convert the dropped points to records converted as delay.","title":"bind_drop_as_delay()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.clone","text":"Get duplicated records. Returns: Type Description RecordsInterface deep-copyed records.","title":"clone()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.column_names","text":"Get column names. Returns: Type Description List [ str ] column names.","title":"column_names()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.columns","text":"Get columns. Returns: Type Description Columns","title":"columns()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.concat","text":"Concat records. Parameters: Name Type Description Default other RecordsInterface records to be concatenated. required Returns: Type Description RecordsInterface concatenated records if inplace=False, otherwise None.","title":"concat()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.data","text":"Get records list. Returns: Type Description Seque [ RecordInterface ] Records list.","title":"data()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.equals","text":"Equals method. Parameters: Name Type Description Default other RecordsInterface comparison target. required Returns: Type Description bool true if record data is same, otherwise false.","title":"equals()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.filter_if","text":"Get filterd records. Parameters: Name Type Description Default f Callable [[ RecordInterface ], bool ] condition function. required inplace bool inplace original instance if true. required","title":"filter_if()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.groupby","text":"Split based on the value of the given column name.","title":"groupby()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge","text":"Merge records by key match. Parameters: Name Type Description Default right_records RecordInterface merge target. required join_left_key str Key to use for matching. required join_right_key str Key to use for matching. required how str merge type. [inner/right/left/outer] required progress_label str label for progress bar. cpp impl only. None Returns: Type Description RecordsInterface","title":"merge()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge--example","text":"left_records = Records([ Record({'join_key': 1, 'left_other': 1}), Record({'join_key': 2, 'left_other': 2}), ]) right_records = Records([ Record({'join_key': 2, 'right_other': 3}), Record({'join_key': 1, 'right_other': 4}), ]) expected = Records([ Record({'join_key': 1, 'left_other': 1, 'right_other': 4}), Record({'join_key': 2, 'left_other': 2, 'right_other': 3}), ]) left_records.merge(right_records, 'join_key').equals(expected) True","title":"Example"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge_sequencial","text":"Merge chronologically contiguous records. Merge left_records[left_key] and the right_records[right_key] that occurred immediately after it. If join_key is set, left_records[join_key]==right_records[join_key] is added as condition. Parameters: Name Type Description Default right_records RecordsInterface merge target. required left_stamp_key str left records key name to use for comparison in time series merge. required right_stamp_key str right records key name to use for comparison in time series merge. required join_key str join key name to use equal condition. required how str merge type. [inner/right/left/outer] required progress_label str label for progress bar. cpp impl only. None","title":"merge_sequencial()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge_sequencial--records","text":"RecordsInterface Merged records.","title":"Records"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge_sequencial--example","text":"left_records = Records([ Record({'join_key': 1, 'left_stamp_key': 0}), Record({'join_key': 2, 'left_stamp_key': 3}) ]) right_records = Records([ Record({'join_key': 2, 'right_stamp_key': 5}), Record({'join_key': 1, 'right_stamp_key': 6}) ]) expected = Records([ Record({'join_key': 1, 'left_stamp_key': 0, 'right_stamp_key': 6}), Record({'join_key': 2, 'left_stamp_key': 3, 'right_stamp_key': 5}), ]) left_records.merge_sequencial( right_records, 'left_stamp_key', 'right_stamp_key', 'join_key', 'inner' ).equals(expected) True","title":"Example"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.merge_sequencial_for_addr_track","text":"Merge for tracking addresses when copying occurs. Parameters: Name Type Description Default source_stamp_key str key name indicating time stamp for source records required source_key str Key name indicating the address of the copy source for source records. required copy_records Recordsinterface copy records required copy_stamp_key str key name indicating time stamp for copy records required copy_from_key str Key name indicating the address of the copy source for source records. required copy_to_key str Key name indicating the address of the copy destination required sink_records RecordsInterface sink-side records required sink_stamp_key str keyname indicating time stamp for copy records required sink_from_key str Key name indicating the address of the copy destination required progress_label str label for progress bar. cpp impl only. None Returns: Type Description RecordsInterface Merged records. Examples: >>> source_records = Records ([ Record({'source_key': 1, 'source_stamp': 0}), ]) >>> copy_records = Records ([ Record({'copy_from_key': 1, 'copy_to_key': 11, 'copy_stamp_key': 1}) ]) >>> sink_records = Records ([ Record({'sink_from_key': 11, 'sink_stamp': 2}), Record({'sink_from_key': 1, 'sink_stamp': 3}), ]) >>> expected = Records ([ Record({'source_stamp':0, 'sink_stamp':3, 'source_key':1}), Record({'source_stamp':0, 'sink_stamp':2, 'source_key':1}), ]) >>> source_records . merge_sequencial_for_addr_track ( 'source_stamp', 'source_key', copy_records, 'copy_stamp_key', 'copy_from_key', 'copy_to_key', sink_records, 'sink_stamp', 'sink_from_key' ).equals(expected) True","title":"merge_sequencial_for_addr_track()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.sort","text":"Sort records. Parameters: Name Type Description Default key Union [ str , List [ str ]] key name to used for sort. required ascending bool ascending if True, descending if false. True","title":"sort()"},{"location":"record/#caret_analyze.record.interface.RecordsInterface.to_dataframe","text":"Convert to pandas dataframe. Returns: Type Description pandas . DataFrame Records data.","title":"to_dataframe()"},{"location":"record/#caret_analyze.record.record","text":"","title":"record"},{"location":"runtime/","text":"Application # Bases: Summarizable callback_group_names () property # Get callback group names. Returns: Type Description List [ str ] callback group name list. callback_groups () property # Get callback groups. Returns: Type Description List [ CallbackGroup ] callback group list. callback_names () property # Get callback names. Returns: Type Description List [ str ] callback name list. callbacks () property # Get callbacks. Returns: Type Description List [ CallbackBase ] callback list. communications () property # Get communications. Returns: Type Description List [ Communication ] communication list. executor_names () property # Get executor names. Returns: Type Description List [ str ] executor name list. executors () property # Get executors. Returns: Type Description List [ Executor ] executor list. get_callback ( callback_name ) # Get callback that mathces the condition. Parameters: Name Type Description Default callback_name str callback name to get. required Returns: Type Description CallbackBase callback that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_callback_group ( callback_group_name ) # Get callback group that matches the condition. Parameters: Name Type Description Default callback_group_name str callback group name to get. required Returns: Type Description CallbackBase callback group that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_callbacks ( * callback_names ) # Get callbacks that match the condition. Parameters: Name Type Description Default callback_names Tuple [ str , ...] callback names to get. required Returns: Type Description List [ CallbackBase ] callbacks that match the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_communication ( publisher_node_name , subscription_node_name , topic_name ) # Get communication that matches the condition. Parameters: Name Type Description Default publisher_node_name str node name that publishes the message. required subscription_node_name str node name that subscribe the message. required topic_name str topic name. required Returns: Type Description Communication communication that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_communications ( topic_name ) # Get communication that matches the condition. Parameters: Name Type Description Default topic_name str topic name to get. required Returns: Type Description List [ Communication ] communications that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_executor ( executor_name ) # Get executor that matches the condition. Parameters: Name Type Description Default executor_name str executor name to get. The name is defined in the architecture file (ex: executor_0). required Returns: Type Description Executor executor that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_node ( node_name ) # Get node that matches the condition. Parameters: Name Type Description Default node_name str node name to get. required Returns: Type Description Node node that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_node_path ( node_name , subscribe_topic_name , publish_topic_name ) # Get node path that matches the condition. Parameters: Name Type Description Default node_name str node name to get. required subscribe_topic_name Optional [ str ] topic name which the node subscribes. required publish_topic_name Optional [ str ] topic name which the node publishes. required Returns: Type Description NodePathStructValue node path that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_node_paths ( node_name ) # Get node paths. Parameters: Name Type Description Default node_name str node name to get. required Returns: Type Description List [ NodePathStructValue ] node path list. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_path ( path_name ) # Get path that matches the condition. Parameters: Name Type Description Default path_name str path name to get. required Returns: Type Description Path path that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. node_names () property # Get node names. Returns: Type Description List [ str ] node name list. node_paths () property # Get paths. Returns: Type Description List [ NodePathStructValue ] path list. nodes () property # Get nodes. Returns: Type Description List [ Node ] node list. path_names () property # Get path names. Returns: Type Description List [ str ] path name list. paths () property # Get paths. Returns: Type Description List [ Path ] path list. summary () property # Get application summary. Returns: Type Description Summary summary info. topic_names () property # Get topic names. Returns: Type Description List [ str ] topic name list. CallbackGroup # Bases: Summarizable callback_group_type () property # Get callback_group_type. Returns: Type Description CallbackGroupType callback_group_type_name () property # Get callback_group_type name. Returns: Type Description CallbackGroupType name node_name () property # Get node name. Returns: Type Description str node name VariablePassing # Bases: PathBase , Summarizable callback_name_read () property # Get read-side callback name. Returns: Type Description [ str ] read-side callback name. callback_name_write () property # Get write-side callback name. Returns: Type Description [ str ] write-side callback name. node_name () property # Get node name. Returns: Type Description str node name application # Application # Bases: Summarizable callback_group_names () property # Get callback group names. Returns: Type Description List [ str ] callback group name list. callback_groups () property # Get callback groups. Returns: Type Description List [ CallbackGroup ] callback group list. callback_names () property # Get callback names. Returns: Type Description List [ str ] callback name list. callbacks () property # Get callbacks. Returns: Type Description List [ CallbackBase ] callback list. communications () property # Get communications. Returns: Type Description List [ Communication ] communication list. executor_names () property # Get executor names. Returns: Type Description List [ str ] executor name list. executors () property # Get executors. Returns: Type Description List [ Executor ] executor list. get_callback ( callback_name ) # Get callback that mathces the condition. Parameters: Name Type Description Default callback_name str callback name to get. required Returns: Type Description CallbackBase callback that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_callback_group ( callback_group_name ) # Get callback group that matches the condition. Parameters: Name Type Description Default callback_group_name str callback group name to get. required Returns: Type Description CallbackBase callback group that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_callbacks ( * callback_names ) # Get callbacks that match the condition. Parameters: Name Type Description Default callback_names Tuple [ str , ...] callback names to get. required Returns: Type Description List [ CallbackBase ] callbacks that match the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_communication ( publisher_node_name , subscription_node_name , topic_name ) # Get communication that matches the condition. Parameters: Name Type Description Default publisher_node_name str node name that publishes the message. required subscription_node_name str node name that subscribe the message. required topic_name str topic name. required Returns: Type Description Communication communication that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_communications ( topic_name ) # Get communication that matches the condition. Parameters: Name Type Description Default topic_name str topic name to get. required Returns: Type Description List [ Communication ] communications that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_executor ( executor_name ) # Get executor that matches the condition. Parameters: Name Type Description Default executor_name str executor name to get. The name is defined in the architecture file (ex: executor_0). required Returns: Type Description Executor executor that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_node ( node_name ) # Get node that matches the condition. Parameters: Name Type Description Default node_name str node name to get. required Returns: Type Description Node node that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_node_path ( node_name , subscribe_topic_name , publish_topic_name ) # Get node path that matches the condition. Parameters: Name Type Description Default node_name str node name to get. required subscribe_topic_name Optional [ str ] topic name which the node subscribes. required publish_topic_name Optional [ str ] topic name which the node publishes. required Returns: Type Description NodePathStructValue node path that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_node_paths ( node_name ) # Get node paths. Parameters: Name Type Description Default node_name str node name to get. required Returns: Type Description List [ NodePathStructValue ] node path list. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. get_path ( path_name ) # Get path that matches the condition. Parameters: Name Type Description Default path_name str path name to get. required Returns: Type Description Path path that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition. node_names () property # Get node names. Returns: Type Description List [ str ] node name list. node_paths () property # Get paths. Returns: Type Description List [ NodePathStructValue ] path list. nodes () property # Get nodes. Returns: Type Description List [ Node ] node list. path_names () property # Get path names. Returns: Type Description List [ str ] path name list. paths () property # Get paths. Returns: Type Description List [ Path ] path list. summary () property # Get application summary. Returns: Type Description Summary summary info. topic_names () property # Get topic names. Returns: Type Description List [ str ] topic name list. callback_group # CallbackGroup # Bases: Summarizable callback_group_type () property # Get callback_group_type. Returns: Type Description CallbackGroupType callback_group_type_name () property # Get callback_group_type name. Returns: Type Description CallbackGroupType name node_name () property # Get node name. Returns: Type Description str node name path_base # PathBase # Base class for Latency. column_names () property # Get column names. Returns: Type Description List [ str ] column names to_dataframe ( remove_dropped = False , treat_drop_as_delay = False , lstrip_s = 0 , rstrip_s = 0 , * , use_sim_time = False , shaper = None ) # Convert to dataframe. Parameters: Name Type Description Default remove_dropped If true, eliminate the records that caused the drop. False treat_drop_as_delay Convert dropped records as a delay. Valid only when remove_dropped=false. False lstrip Remove from beginning. [s] required rstrip Remove from end [s] required Returns: Type Description pandas . DataFrame Information for each delay. to_histogram ( binsize_ns = 1000000 , treat_drop_as_delay = False , lstrip_s = 0 , rstrip_s = 0 , * , shaper = None ) # Convert to histogram data. Parameters: Name Type Description Default binsize_ns int bin size for histogram. default 1ms. 1000000 treat_drop_as_delay bool Convert dropped records as a delay. False lstrip Remove from beginning. [s] required rstrip Remove from end [s] required Returns: Type Description pandas . DataFrame Information for each delay. to_records ( attrs = None ) # Convert to records. Returns: Type Description RecordsInterface Information for each delay. to_timeseries ( remove_dropped = False , treat_drop_as_delay = False , lstrip_s = 0 , rstrip_s = 0 , * , shaper = None ) # Convert to timeseries data. Parameters: Name Type Description Default remove_dropped bool If true, eliminate the records that caused the drop. False treat_drop_as_delay bool Convert dropped records as a delay. Valid only when remove_dropped=false. False lstrip Remove from beginning. [s] required rstrip Remove from end [s] required Returns: Type Description pandas . DataFrame Information for each delay. variable_passing # VariablePassing # Bases: PathBase , Summarizable callback_name_read () property # Get read-side callback name. Returns: Type Description [ str ] read-side callback name. callback_name_write () property # Get write-side callback name. Returns: Type Description [ str ] write-side callback name. node_name () property # Get node name. Returns: Type Description str node name","title":"Runtime"},{"location":"runtime/#caret_analyze.runtime.Application","text":"Bases: Summarizable","title":"Application"},{"location":"runtime/#caret_analyze.runtime.application.Application.callback_group_names","text":"Get callback group names. Returns: Type Description List [ str ] callback group name list.","title":"callback_group_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.callback_groups","text":"Get callback groups. Returns: Type Description List [ CallbackGroup ] callback group list.","title":"callback_groups()"},{"location":"runtime/#caret_analyze.runtime.application.Application.callback_names","text":"Get callback names. Returns: Type Description List [ str ] callback name list.","title":"callback_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.callbacks","text":"Get callbacks. Returns: Type Description List [ CallbackBase ] callback list.","title":"callbacks()"},{"location":"runtime/#caret_analyze.runtime.application.Application.communications","text":"Get communications. Returns: Type Description List [ Communication ] communication list.","title":"communications()"},{"location":"runtime/#caret_analyze.runtime.application.Application.executor_names","text":"Get executor names. Returns: Type Description List [ str ] executor name list.","title":"executor_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.executors","text":"Get executors. Returns: Type Description List [ Executor ] executor list.","title":"executors()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_callback","text":"Get callback that mathces the condition. Parameters: Name Type Description Default callback_name str callback name to get. required Returns: Type Description CallbackBase callback that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_callback()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_callback_group","text":"Get callback group that matches the condition. Parameters: Name Type Description Default callback_group_name str callback group name to get. required Returns: Type Description CallbackBase callback group that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_callback_group()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_callbacks","text":"Get callbacks that match the condition. Parameters: Name Type Description Default callback_names Tuple [ str , ...] callback names to get. required Returns: Type Description List [ CallbackBase ] callbacks that match the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_callbacks()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_communication","text":"Get communication that matches the condition. Parameters: Name Type Description Default publisher_node_name str node name that publishes the message. required subscription_node_name str node name that subscribe the message. required topic_name str topic name. required Returns: Type Description Communication communication that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_communication()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_communications","text":"Get communication that matches the condition. Parameters: Name Type Description Default topic_name str topic name to get. required Returns: Type Description List [ Communication ] communications that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_communications()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_executor","text":"Get executor that matches the condition. Parameters: Name Type Description Default executor_name str executor name to get. The name is defined in the architecture file (ex: executor_0). required Returns: Type Description Executor executor that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_executor()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_node","text":"Get node that matches the condition. Parameters: Name Type Description Default node_name str node name to get. required Returns: Type Description Node node that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_node()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_node_path","text":"Get node path that matches the condition. Parameters: Name Type Description Default node_name str node name to get. required subscribe_topic_name Optional [ str ] topic name which the node subscribes. required publish_topic_name Optional [ str ] topic name which the node publishes. required Returns: Type Description NodePathStructValue node path that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_node_path()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_node_paths","text":"Get node paths. Parameters: Name Type Description Default node_name str node name to get. required Returns: Type Description List [ NodePathStructValue ] node path list. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_node_paths()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_path","text":"Get path that matches the condition. Parameters: Name Type Description Default path_name str path name to get. required Returns: Type Description Path path that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_path()"},{"location":"runtime/#caret_analyze.runtime.application.Application.node_names","text":"Get node names. Returns: Type Description List [ str ] node name list.","title":"node_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.node_paths","text":"Get paths. Returns: Type Description List [ NodePathStructValue ] path list.","title":"node_paths()"},{"location":"runtime/#caret_analyze.runtime.application.Application.nodes","text":"Get nodes. Returns: Type Description List [ Node ] node list.","title":"nodes()"},{"location":"runtime/#caret_analyze.runtime.application.Application.path_names","text":"Get path names. Returns: Type Description List [ str ] path name list.","title":"path_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.paths","text":"Get paths. Returns: Type Description List [ Path ] path list.","title":"paths()"},{"location":"runtime/#caret_analyze.runtime.application.Application.summary","text":"Get application summary. Returns: Type Description Summary summary info.","title":"summary()"},{"location":"runtime/#caret_analyze.runtime.application.Application.topic_names","text":"Get topic names. Returns: Type Description List [ str ] topic name list.","title":"topic_names()"},{"location":"runtime/#caret_analyze.runtime.CallbackGroup","text":"Bases: Summarizable","title":"CallbackGroup"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.callback_group_type","text":"Get callback_group_type. Returns: Type Description CallbackGroupType","title":"callback_group_type()"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.callback_group_type_name","text":"Get callback_group_type name. Returns: Type Description CallbackGroupType name","title":"callback_group_type_name()"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"runtime/#caret_analyze.runtime.VariablePassing","text":"Bases: PathBase , Summarizable","title":"VariablePassing"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.callback_name_read","text":"Get read-side callback name. Returns: Type Description [ str ] read-side callback name.","title":"callback_name_read()"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.callback_name_write","text":"Get write-side callback name. Returns: Type Description [ str ] write-side callback name.","title":"callback_name_write()"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"runtime/#caret_analyze.runtime.application","text":"","title":"application"},{"location":"runtime/#caret_analyze.runtime.application.Application","text":"Bases: Summarizable","title":"Application"},{"location":"runtime/#caret_analyze.runtime.application.Application.callback_group_names","text":"Get callback group names. Returns: Type Description List [ str ] callback group name list.","title":"callback_group_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.callback_groups","text":"Get callback groups. Returns: Type Description List [ CallbackGroup ] callback group list.","title":"callback_groups()"},{"location":"runtime/#caret_analyze.runtime.application.Application.callback_names","text":"Get callback names. Returns: Type Description List [ str ] callback name list.","title":"callback_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.callbacks","text":"Get callbacks. Returns: Type Description List [ CallbackBase ] callback list.","title":"callbacks()"},{"location":"runtime/#caret_analyze.runtime.application.Application.communications","text":"Get communications. Returns: Type Description List [ Communication ] communication list.","title":"communications()"},{"location":"runtime/#caret_analyze.runtime.application.Application.executor_names","text":"Get executor names. Returns: Type Description List [ str ] executor name list.","title":"executor_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.executors","text":"Get executors. Returns: Type Description List [ Executor ] executor list.","title":"executors()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_callback","text":"Get callback that mathces the condition. Parameters: Name Type Description Default callback_name str callback name to get. required Returns: Type Description CallbackBase callback that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_callback()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_callback_group","text":"Get callback group that matches the condition. Parameters: Name Type Description Default callback_group_name str callback group name to get. required Returns: Type Description CallbackBase callback group that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_callback_group()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_callbacks","text":"Get callbacks that match the condition. Parameters: Name Type Description Default callback_names Tuple [ str , ...] callback names to get. required Returns: Type Description List [ CallbackBase ] callbacks that match the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_callbacks()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_communication","text":"Get communication that matches the condition. Parameters: Name Type Description Default publisher_node_name str node name that publishes the message. required subscription_node_name str node name that subscribe the message. required topic_name str topic name. required Returns: Type Description Communication communication that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_communication()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_communications","text":"Get communication that matches the condition. Parameters: Name Type Description Default topic_name str topic name to get. required Returns: Type Description List [ Communication ] communications that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_communications()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_executor","text":"Get executor that matches the condition. Parameters: Name Type Description Default executor_name str executor name to get. The name is defined in the architecture file (ex: executor_0). required Returns: Type Description Executor executor that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_executor()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_node","text":"Get node that matches the condition. Parameters: Name Type Description Default node_name str node name to get. required Returns: Type Description Node node that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_node()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_node_path","text":"Get node path that matches the condition. Parameters: Name Type Description Default node_name str node name to get. required subscribe_topic_name Optional [ str ] topic name which the node subscribes. required publish_topic_name Optional [ str ] topic name which the node publishes. required Returns: Type Description NodePathStructValue node path that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_node_path()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_node_paths","text":"Get node paths. Parameters: Name Type Description Default node_name str node name to get. required Returns: Type Description List [ NodePathStructValue ] node path list. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_node_paths()"},{"location":"runtime/#caret_analyze.runtime.application.Application.get_path","text":"Get path that matches the condition. Parameters: Name Type Description Default path_name str path name to get. required Returns: Type Description Path path that matches the condition. Raises: Type Description InvalidArgumentError Argument type is invalid. ItemNotFoundError Failed to find item that match the condition. MultipleItemFoundError Failed to identify item that match the condition.","title":"get_path()"},{"location":"runtime/#caret_analyze.runtime.application.Application.node_names","text":"Get node names. Returns: Type Description List [ str ] node name list.","title":"node_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.node_paths","text":"Get paths. Returns: Type Description List [ NodePathStructValue ] path list.","title":"node_paths()"},{"location":"runtime/#caret_analyze.runtime.application.Application.nodes","text":"Get nodes. Returns: Type Description List [ Node ] node list.","title":"nodes()"},{"location":"runtime/#caret_analyze.runtime.application.Application.path_names","text":"Get path names. Returns: Type Description List [ str ] path name list.","title":"path_names()"},{"location":"runtime/#caret_analyze.runtime.application.Application.paths","text":"Get paths. Returns: Type Description List [ Path ] path list.","title":"paths()"},{"location":"runtime/#caret_analyze.runtime.application.Application.summary","text":"Get application summary. Returns: Type Description Summary summary info.","title":"summary()"},{"location":"runtime/#caret_analyze.runtime.application.Application.topic_names","text":"Get topic names. Returns: Type Description List [ str ] topic name list.","title":"topic_names()"},{"location":"runtime/#caret_analyze.runtime.callback_group","text":"","title":"callback_group"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup","text":"Bases: Summarizable","title":"CallbackGroup"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.callback_group_type","text":"Get callback_group_type. Returns: Type Description CallbackGroupType","title":"callback_group_type()"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.callback_group_type_name","text":"Get callback_group_type name. Returns: Type Description CallbackGroupType name","title":"callback_group_type_name()"},{"location":"runtime/#caret_analyze.runtime.callback_group.CallbackGroup.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"runtime/#caret_analyze.runtime.path_base","text":"","title":"path_base"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase","text":"Base class for Latency.","title":"PathBase"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.column_names","text":"Get column names. Returns: Type Description List [ str ] column names","title":"column_names()"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.to_dataframe","text":"Convert to dataframe. Parameters: Name Type Description Default remove_dropped If true, eliminate the records that caused the drop. False treat_drop_as_delay Convert dropped records as a delay. Valid only when remove_dropped=false. False lstrip Remove from beginning. [s] required rstrip Remove from end [s] required Returns: Type Description pandas . DataFrame Information for each delay.","title":"to_dataframe()"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.to_histogram","text":"Convert to histogram data. Parameters: Name Type Description Default binsize_ns int bin size for histogram. default 1ms. 1000000 treat_drop_as_delay bool Convert dropped records as a delay. False lstrip Remove from beginning. [s] required rstrip Remove from end [s] required Returns: Type Description pandas . DataFrame Information for each delay.","title":"to_histogram()"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.to_records","text":"Convert to records. Returns: Type Description RecordsInterface Information for each delay.","title":"to_records()"},{"location":"runtime/#caret_analyze.runtime.path_base.PathBase.to_timeseries","text":"Convert to timeseries data. Parameters: Name Type Description Default remove_dropped bool If true, eliminate the records that caused the drop. False treat_drop_as_delay bool Convert dropped records as a delay. Valid only when remove_dropped=false. False lstrip Remove from beginning. [s] required rstrip Remove from end [s] required Returns: Type Description pandas . DataFrame Information for each delay.","title":"to_timeseries()"},{"location":"runtime/#caret_analyze.runtime.variable_passing","text":"","title":"variable_passing"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing","text":"Bases: PathBase , Summarizable","title":"VariablePassing"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.callback_name_read","text":"Get read-side callback name. Returns: Type Description [ str ] read-side callback name.","title":"callback_name_read()"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.callback_name_write","text":"Get write-side callback name. Returns: Type Description [ str ] write-side callback name.","title":"callback_name_write()"},{"location":"runtime/#caret_analyze.runtime.variable_passing.VariablePassing.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"value_objects/","text":"CallbackChain # Bases: MessageContext TYPE_NAME = 'callback_chain' class-attribute # Callback chain. Latency is calculated from callback durations in the node path. When a path within a node passes through multiple callbacks, it is assumed that messages are passed between callbacks by a buffer of queue size 1 (ex. a member variable that stores a single message). If the queue size is larger than 1, the node latency may be calculated to be small. CallbackGroupStructValue # Bases: ValueObject , Summarizable Callback group value object. __init__ ( callback_group_type , node_name , callback_values , callback_group_name , callback_group_id ) # Construct callback group value object. Parameters: Name Type Description Default callback_group_type_name str required node_names List [ str ] required callback_group_type () property # Get callback_group_type. Returns: Type Description CallbackGroupType callback_group_type_name () property # Get callback_group_type name. Returns: Type Description CallbackGroupType name node_name () property # Get node name. Returns: Type Description str node name CallbackGroupType # Bases: ValueObject callback group type class. __init__ ( name ) # Construct CallbackGroupType. Parameters: Name Type Description Default name str type name ['mutually_exclusive', 'reentrant'] required type_name () property # Return callback group type name. Returns: Type Description str type name. CallbackGroupValue # Bases: ValueObject Callback group value object. __init__ ( callback_group_type_name , node_name , node_id , callback_ids , callback_group_id , * , callback_group_name = None ) # Construct callback value object. Parameters: Name Type Description Default callback_group_type_name str required node_names Tuple [ str ] required callback_group_type () property # Get callback_group_type. Returns: Type Description CallbackGroupType callback_ids () property # Get callback ids. Returns: Type Description Tuple [ str , ...] callback ids CallbackStructValue # Bases: Summarizable Callback value base class. callback_id () property # Get callback id. Returns: Type Description str callback id callback_name () property # Get callback name. Returns: Type Description str callback name callback_type () abstractmethod property # Get callback type name. Returns: Type Description CallbackType callback type node_name () property # Get node name. Returns: Type Description str node name symbol () property # Get callback symbol name. Returns: Type Description str callback symbol name CallbackType # Bases: ValueObject callback group type class. __init__ ( name ) # Construct callback type. Parameters: Name Type Description Default name str callback type name - timer_callback - subscription_callback - service_callback - client_callback required type_name () property # Return callback type name. Returns: Type Description str type name. CallbackValue # Bases: ValueObject Callback value base class. callback_id () property # Get callback id. callback id is is used to bind. callback id should be the same if the node name and other properties are the same. If any properties is different, it should be a different callback id. Returns: Type Description str callback unique id. callback_name () property # Get callback name. Note that different architecture_readers return different values. Returns: Type Description str callback name callback_type () abstractmethod property # Get callback type name. Returns: Type Description CallbackType callback type node_id () property # Get node id. Returns: Type Description str node name node_name () property # Get node name. Returns: Type Description str node name service_name () property # Get service name. Returns: Type Description str service name. symbol () property # Get callback symbol name. Returns: Type Description str callback symbol name ExecutorStructValue # Bases: ValueObject , Summarizable Executor info for architecture. ExecutorType # Bases: ValueObject executor type class. type_name () property # Return executor type name. Returns: Type Description str type name. ExecutorValue # Bases: ValueObject Executor info for architecture. MessageContext # Bases: ValueObject , Summarizable Structured message context value. MessageContextType # Bases: ValueObject Message context type. NodeStructValue # Bases: ValueObject , Summarizable Executor info for architecture. PathValue # Bases: ValueObject Path name alias. PublisherStructValue # Bases: ValueObject , Summarizable Structured publisher value. PublisherValue # Bases: ValueObject Publisher value. Qos # Bases: ValueObject , Summarizable qos info. SubscriptionCallbackStructValue # Bases: CallbackStructValue , ValueObject Structured subscription callback value. SubscriptionCallbackValue # Bases: CallbackValue Subscription callback value. SubscriptionStructValue # Bases: ValueObject , Summarizable Subscription info. SubscriptionValue # Bases: ValueObject Subscription info. Tilde # Bases: MessageContext TYPE_NAME = 'tilde' class-attribute # tilde. Latency is calculated from tilde. TimerCallbackStructValue # Bases: CallbackStructValue , ValueObject Structured timer callback value. TimerCallbackValue # Bases: CallbackValue Timer callback value. TimerStructValue # Bases: ValueObject , Summarizable Timer info. TimerValue # Bases: ValueObject Timer info. TransformBroadcasterStructValue # Bases: ValueObject Structured transform broadcaster value. TransformBufferValue # Bases: ValueObject transform buffer info. TransformFrameBroadcasterStructValue # Bases: ValueObject Structured transform broadcaster value. UseLatestMessage # Bases: MessageContext TYPE_NAME = 'use_latest_message' class-attribute # Use messsage context ValueObject # Value object base class. VariablePassingStructValue # Bases: ValueObject , Summarizable variable passing info. callback_id_read () property # Get read-side callback id. Returns: Type Description [ str ] read-side callback id. callback_id_write () property # Get write-side callback id. Returns: Type Description [ str ] write-side callback id. callback_name_read () property # Get read-side callback name. Returns: Type Description [ str ] read-side callback name. callback_name_write () property # Get write-side callback name. Returns: Type Description [ str ] write-side callback name. node_name () property # Get node name. Returns: Type Description str node name VariablePassingValue # Bases: ValueObject variable passing info. callback_id_read () property # Get read-side callback id. Returns: Type Description [ str ] read-side callback id. callback_id_write () property # Get write-side callback id. Returns: Type Description [ str ] write-side callback id. node_name () property # Get node name. Returns: Type Description str node name callback # CallbackStructValue # Bases: Summarizable Callback value base class. callback_id () property # Get callback id. Returns: Type Description str callback id callback_name () property # Get callback name. Returns: Type Description str callback name callback_type () abstractmethod property # Get callback type name. Returns: Type Description CallbackType callback type node_name () property # Get node name. Returns: Type Description str node name symbol () property # Get callback symbol name. Returns: Type Description str callback symbol name CallbackType # Bases: ValueObject callback group type class. __init__ ( name ) # Construct callback type. Parameters: Name Type Description Default name str callback type name - timer_callback - subscription_callback - service_callback - client_callback required type_name () property # Return callback type name. Returns: Type Description str type name. CallbackValue # Bases: ValueObject Callback value base class. callback_id () property # Get callback id. callback id is is used to bind. callback id should be the same if the node name and other properties are the same. If any properties is different, it should be a different callback id. Returns: Type Description str callback unique id. callback_name () property # Get callback name. Note that different architecture_readers return different values. Returns: Type Description str callback name callback_type () abstractmethod property # Get callback type name. Returns: Type Description CallbackType callback type node_id () property # Get node id. Returns: Type Description str node name node_name () property # Get node name. Returns: Type Description str node name service_name () property # Get service name. Returns: Type Description str service name. symbol () property # Get callback symbol name. Returns: Type Description str callback symbol name SubscriptionCallbackStructValue # Bases: CallbackStructValue , ValueObject Structured subscription callback value. SubscriptionCallbackValue # Bases: CallbackValue Subscription callback value. TimerCallbackStructValue # Bases: CallbackStructValue , ValueObject Structured timer callback value. TimerCallbackValue # Bases: CallbackValue Timer callback value. callback_group # CallbackGroupStructValue # Bases: ValueObject , Summarizable Callback group value object. __init__ ( callback_group_type , node_name , callback_values , callback_group_name , callback_group_id ) # Construct callback group value object. Parameters: Name Type Description Default callback_group_type_name str required node_names List [ str ] required callback_group_type () property # Get callback_group_type. Returns: Type Description CallbackGroupType callback_group_type_name () property # Get callback_group_type name. Returns: Type Description CallbackGroupType name node_name () property # Get node name. Returns: Type Description str node name CallbackGroupType # Bases: ValueObject callback group type class. __init__ ( name ) # Construct CallbackGroupType. Parameters: Name Type Description Default name str type name ['mutually_exclusive', 'reentrant'] required type_name () property # Return callback group type name. Returns: Type Description str type name. CallbackGroupValue # Bases: ValueObject Callback group value object. __init__ ( callback_group_type_name , node_name , node_id , callback_ids , callback_group_id , * , callback_group_name = None ) # Construct callback value object. Parameters: Name Type Description Default callback_group_type_name str required node_names Tuple [ str ] required callback_group_type () property # Get callback_group_type. Returns: Type Description CallbackGroupType callback_ids () property # Get callback ids. Returns: Type Description Tuple [ str , ...] callback ids executor # ExecutorStructValue # Bases: ValueObject , Summarizable Executor info for architecture. ExecutorType # Bases: ValueObject executor type class. type_name () property # Return executor type name. Returns: Type Description str type name. ExecutorValue # Bases: ValueObject Executor info for architecture. message_context # CallbackChain # Bases: MessageContext TYPE_NAME = 'callback_chain' class-attribute # Callback chain. Latency is calculated from callback durations in the node path. When a path within a node passes through multiple callbacks, it is assumed that messages are passed between callbacks by a buffer of queue size 1 (ex. a member variable that stores a single message). If the queue size is larger than 1, the node latency may be calculated to be small. InheritUniqueStamp # Bases: MessageContext TYPE_NAME = 'inherit_unique_stamp' class-attribute # Inherit header timestamp. Latency is calculated for pub/sub messages with the same timestamp value. If the input timestamp is not unique, it may calculate an incorrect value. MessageContext # Bases: ValueObject , Summarizable Structured message context value. MessageContextType # Bases: ValueObject Message context type. Tilde # Bases: MessageContext TYPE_NAME = 'tilde' class-attribute # tilde. Latency is calculated from tilde. UseLatestMessage # Bases: MessageContext TYPE_NAME = 'use_latest_message' class-attribute # Use messsage context node # NodeStructValue # Bases: ValueObject , Summarizable Executor info for architecture. path # PathValue # Bases: ValueObject Path name alias. publisher # PublisherStructValue # Bases: ValueObject , Summarizable Structured publisher value. PublisherValue # Bases: ValueObject Publisher value. qos # Qos # Bases: ValueObject , Summarizable qos info. service # ServiceValue # Bases: ValueObject Service info. subscription # SubscriptionStructValue # Bases: ValueObject , Summarizable Subscription info. SubscriptionValue # Bases: ValueObject Subscription info. timer # TimerStructValue # Bases: ValueObject , Summarizable Timer info. TimerValue # Bases: ValueObject Timer info. transform # TransformBroadcasterStructValue # Bases: ValueObject Structured transform broadcaster value. TransformBufferValue # Bases: ValueObject transform buffer info. TransformFrameBroadcasterStructValue # Bases: ValueObject Structured transform broadcaster value. TransformFrameBufferValue # Bases: ValueObject transform buffer info. value_object # ValueObject # Value object base class. variable_passing # VariablePassingStructValue # Bases: ValueObject , Summarizable variable passing info. callback_id_read () property # Get read-side callback id. Returns: Type Description [ str ] read-side callback id. callback_id_write () property # Get write-side callback id. Returns: Type Description [ str ] write-side callback id. callback_name_read () property # Get read-side callback name. Returns: Type Description [ str ] read-side callback name. callback_name_write () property # Get write-side callback name. Returns: Type Description [ str ] write-side callback name. node_name () property # Get node name. Returns: Type Description str node name VariablePassingValue # Bases: ValueObject variable passing info. callback_id_read () property # Get read-side callback id. Returns: Type Description [ str ] read-side callback id. callback_id_write () property # Get write-side callback id. Returns: Type Description [ str ] write-side callback id. node_name () property # Get node name. Returns: Type Description str node name","title":"Value_objects"},{"location":"value_objects/#caret_analyze.value_objects.CallbackChain","text":"Bases: MessageContext","title":"CallbackChain"},{"location":"value_objects/#caret_analyze.value_objects.message_context.CallbackChain.TYPE_NAME","text":"Callback chain. Latency is calculated from callback durations in the node path. When a path within a node passes through multiple callbacks, it is assumed that messages are passed between callbacks by a buffer of queue size 1 (ex. a member variable that stores a single message). If the queue size is larger than 1, the node latency may be calculated to be small.","title":"TYPE_NAME"},{"location":"value_objects/#caret_analyze.value_objects.CallbackGroupStructValue","text":"Bases: ValueObject , Summarizable Callback group value object.","title":"CallbackGroupStructValue"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupStructValue.__init__","text":"Construct callback group value object. Parameters: Name Type Description Default callback_group_type_name str required node_names List [ str ] required","title":"__init__()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupStructValue.callback_group_type","text":"Get callback_group_type. Returns: Type Description CallbackGroupType","title":"callback_group_type()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupStructValue.callback_group_type_name","text":"Get callback_group_type name. Returns: Type Description CallbackGroupType name","title":"callback_group_type_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupStructValue.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"value_objects/#caret_analyze.value_objects.CallbackGroupType","text":"Bases: ValueObject callback group type class.","title":"CallbackGroupType"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupType.__init__","text":"Construct CallbackGroupType. Parameters: Name Type Description Default name str type name ['mutually_exclusive', 'reentrant'] required","title":"__init__()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupType.type_name","text":"Return callback group type name. Returns: Type Description str type name.","title":"type_name()"},{"location":"value_objects/#caret_analyze.value_objects.CallbackGroupValue","text":"Bases: ValueObject Callback group value object.","title":"CallbackGroupValue"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupValue.__init__","text":"Construct callback value object. Parameters: Name Type Description Default callback_group_type_name str required node_names Tuple [ str ] required","title":"__init__()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupValue.callback_group_type","text":"Get callback_group_type. Returns: Type Description CallbackGroupType","title":"callback_group_type()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupValue.callback_ids","text":"Get callback ids. Returns: Type Description Tuple [ str , ...] callback ids","title":"callback_ids()"},{"location":"value_objects/#caret_analyze.value_objects.CallbackStructValue","text":"Bases: Summarizable Callback value base class.","title":"CallbackStructValue"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackStructValue.callback_id","text":"Get callback id. Returns: Type Description str callback id","title":"callback_id()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackStructValue.callback_name","text":"Get callback name. Returns: Type Description str callback name","title":"callback_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackStructValue.callback_type","text":"Get callback type name. Returns: Type Description CallbackType callback type","title":"callback_type()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackStructValue.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackStructValue.symbol","text":"Get callback symbol name. Returns: Type Description str callback symbol name","title":"symbol()"},{"location":"value_objects/#caret_analyze.value_objects.CallbackType","text":"Bases: ValueObject callback group type class.","title":"CallbackType"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackType.__init__","text":"Construct callback type. Parameters: Name Type Description Default name str callback type name - timer_callback - subscription_callback - service_callback - client_callback required","title":"__init__()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackType.type_name","text":"Return callback type name. Returns: Type Description str type name.","title":"type_name()"},{"location":"value_objects/#caret_analyze.value_objects.CallbackValue","text":"Bases: ValueObject Callback value base class.","title":"CallbackValue"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.callback_id","text":"Get callback id. callback id is is used to bind. callback id should be the same if the node name and other properties are the same. If any properties is different, it should be a different callback id. Returns: Type Description str callback unique id.","title":"callback_id()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.callback_name","text":"Get callback name. Note that different architecture_readers return different values. Returns: Type Description str callback name","title":"callback_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.callback_type","text":"Get callback type name. Returns: Type Description CallbackType callback type","title":"callback_type()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.node_id","text":"Get node id. Returns: Type Description str node name","title":"node_id()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.service_name","text":"Get service name. Returns: Type Description str service name.","title":"service_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.symbol","text":"Get callback symbol name. Returns: Type Description str callback symbol name","title":"symbol()"},{"location":"value_objects/#caret_analyze.value_objects.ExecutorStructValue","text":"Bases: ValueObject , Summarizable Executor info for architecture.","title":"ExecutorStructValue"},{"location":"value_objects/#caret_analyze.value_objects.ExecutorType","text":"Bases: ValueObject executor type class.","title":"ExecutorType"},{"location":"value_objects/#caret_analyze.value_objects.executor.ExecutorType.type_name","text":"Return executor type name. Returns: Type Description str type name.","title":"type_name()"},{"location":"value_objects/#caret_analyze.value_objects.ExecutorValue","text":"Bases: ValueObject Executor info for architecture.","title":"ExecutorValue"},{"location":"value_objects/#caret_analyze.value_objects.MessageContext","text":"Bases: ValueObject , Summarizable Structured message context value.","title":"MessageContext"},{"location":"value_objects/#caret_analyze.value_objects.MessageContextType","text":"Bases: ValueObject Message context type.","title":"MessageContextType"},{"location":"value_objects/#caret_analyze.value_objects.NodeStructValue","text":"Bases: ValueObject , Summarizable Executor info for architecture.","title":"NodeStructValue"},{"location":"value_objects/#caret_analyze.value_objects.PathValue","text":"Bases: ValueObject Path name alias.","title":"PathValue"},{"location":"value_objects/#caret_analyze.value_objects.PublisherStructValue","text":"Bases: ValueObject , Summarizable Structured publisher value.","title":"PublisherStructValue"},{"location":"value_objects/#caret_analyze.value_objects.PublisherValue","text":"Bases: ValueObject Publisher value.","title":"PublisherValue"},{"location":"value_objects/#caret_analyze.value_objects.Qos","text":"Bases: ValueObject , Summarizable qos info.","title":"Qos"},{"location":"value_objects/#caret_analyze.value_objects.SubscriptionCallbackStructValue","text":"Bases: CallbackStructValue , ValueObject Structured subscription callback value.","title":"SubscriptionCallbackStructValue"},{"location":"value_objects/#caret_analyze.value_objects.SubscriptionCallbackValue","text":"Bases: CallbackValue Subscription callback value.","title":"SubscriptionCallbackValue"},{"location":"value_objects/#caret_analyze.value_objects.SubscriptionStructValue","text":"Bases: ValueObject , Summarizable Subscription info.","title":"SubscriptionStructValue"},{"location":"value_objects/#caret_analyze.value_objects.SubscriptionValue","text":"Bases: ValueObject Subscription info.","title":"SubscriptionValue"},{"location":"value_objects/#caret_analyze.value_objects.Tilde","text":"Bases: MessageContext","title":"Tilde"},{"location":"value_objects/#caret_analyze.value_objects.message_context.Tilde.TYPE_NAME","text":"tilde. Latency is calculated from tilde.","title":"TYPE_NAME"},{"location":"value_objects/#caret_analyze.value_objects.TimerCallbackStructValue","text":"Bases: CallbackStructValue , ValueObject Structured timer callback value.","title":"TimerCallbackStructValue"},{"location":"value_objects/#caret_analyze.value_objects.TimerCallbackValue","text":"Bases: CallbackValue Timer callback value.","title":"TimerCallbackValue"},{"location":"value_objects/#caret_analyze.value_objects.TimerStructValue","text":"Bases: ValueObject , Summarizable Timer info.","title":"TimerStructValue"},{"location":"value_objects/#caret_analyze.value_objects.TimerValue","text":"Bases: ValueObject Timer info.","title":"TimerValue"},{"location":"value_objects/#caret_analyze.value_objects.TransformBroadcasterStructValue","text":"Bases: ValueObject Structured transform broadcaster value.","title":"TransformBroadcasterStructValue"},{"location":"value_objects/#caret_analyze.value_objects.TransformBufferValue","text":"Bases: ValueObject transform buffer info.","title":"TransformBufferValue"},{"location":"value_objects/#caret_analyze.value_objects.TransformFrameBroadcasterStructValue","text":"Bases: ValueObject Structured transform broadcaster value.","title":"TransformFrameBroadcasterStructValue"},{"location":"value_objects/#caret_analyze.value_objects.UseLatestMessage","text":"Bases: MessageContext","title":"UseLatestMessage"},{"location":"value_objects/#caret_analyze.value_objects.message_context.UseLatestMessage.TYPE_NAME","text":"Use messsage context","title":"TYPE_NAME"},{"location":"value_objects/#caret_analyze.value_objects.ValueObject","text":"Value object base class.","title":"ValueObject"},{"location":"value_objects/#caret_analyze.value_objects.VariablePassingStructValue","text":"Bases: ValueObject , Summarizable variable passing info.","title":"VariablePassingStructValue"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingStructValue.callback_id_read","text":"Get read-side callback id. Returns: Type Description [ str ] read-side callback id.","title":"callback_id_read()"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingStructValue.callback_id_write","text":"Get write-side callback id. Returns: Type Description [ str ] write-side callback id.","title":"callback_id_write()"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingStructValue.callback_name_read","text":"Get read-side callback name. Returns: Type Description [ str ] read-side callback name.","title":"callback_name_read()"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingStructValue.callback_name_write","text":"Get write-side callback name. Returns: Type Description [ str ] write-side callback name.","title":"callback_name_write()"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingStructValue.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"value_objects/#caret_analyze.value_objects.VariablePassingValue","text":"Bases: ValueObject variable passing info.","title":"VariablePassingValue"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingValue.callback_id_read","text":"Get read-side callback id. Returns: Type Description [ str ] read-side callback id.","title":"callback_id_read()"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingValue.callback_id_write","text":"Get write-side callback id. Returns: Type Description [ str ] write-side callback id.","title":"callback_id_write()"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingValue.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback","text":"","title":"callback"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackStructValue","text":"Bases: Summarizable Callback value base class.","title":"CallbackStructValue"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackStructValue.callback_id","text":"Get callback id. Returns: Type Description str callback id","title":"callback_id()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackStructValue.callback_name","text":"Get callback name. Returns: Type Description str callback name","title":"callback_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackStructValue.callback_type","text":"Get callback type name. Returns: Type Description CallbackType callback type","title":"callback_type()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackStructValue.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackStructValue.symbol","text":"Get callback symbol name. Returns: Type Description str callback symbol name","title":"symbol()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackType","text":"Bases: ValueObject callback group type class.","title":"CallbackType"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackType.__init__","text":"Construct callback type. Parameters: Name Type Description Default name str callback type name - timer_callback - subscription_callback - service_callback - client_callback required","title":"__init__()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackType.type_name","text":"Return callback type name. Returns: Type Description str type name.","title":"type_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue","text":"Bases: ValueObject Callback value base class.","title":"CallbackValue"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.callback_id","text":"Get callback id. callback id is is used to bind. callback id should be the same if the node name and other properties are the same. If any properties is different, it should be a different callback id. Returns: Type Description str callback unique id.","title":"callback_id()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.callback_name","text":"Get callback name. Note that different architecture_readers return different values. Returns: Type Description str callback name","title":"callback_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.callback_type","text":"Get callback type name. Returns: Type Description CallbackType callback type","title":"callback_type()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.node_id","text":"Get node id. Returns: Type Description str node name","title":"node_id()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.service_name","text":"Get service name. Returns: Type Description str service name.","title":"service_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback.CallbackValue.symbol","text":"Get callback symbol name. Returns: Type Description str callback symbol name","title":"symbol()"},{"location":"value_objects/#caret_analyze.value_objects.callback.SubscriptionCallbackStructValue","text":"Bases: CallbackStructValue , ValueObject Structured subscription callback value.","title":"SubscriptionCallbackStructValue"},{"location":"value_objects/#caret_analyze.value_objects.callback.SubscriptionCallbackValue","text":"Bases: CallbackValue Subscription callback value.","title":"SubscriptionCallbackValue"},{"location":"value_objects/#caret_analyze.value_objects.callback.TimerCallbackStructValue","text":"Bases: CallbackStructValue , ValueObject Structured timer callback value.","title":"TimerCallbackStructValue"},{"location":"value_objects/#caret_analyze.value_objects.callback.TimerCallbackValue","text":"Bases: CallbackValue Timer callback value.","title":"TimerCallbackValue"},{"location":"value_objects/#caret_analyze.value_objects.callback_group","text":"","title":"callback_group"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupStructValue","text":"Bases: ValueObject , Summarizable Callback group value object.","title":"CallbackGroupStructValue"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupStructValue.__init__","text":"Construct callback group value object. Parameters: Name Type Description Default callback_group_type_name str required node_names List [ str ] required","title":"__init__()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupStructValue.callback_group_type","text":"Get callback_group_type. Returns: Type Description CallbackGroupType","title":"callback_group_type()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupStructValue.callback_group_type_name","text":"Get callback_group_type name. Returns: Type Description CallbackGroupType name","title":"callback_group_type_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupStructValue.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupType","text":"Bases: ValueObject callback group type class.","title":"CallbackGroupType"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupType.__init__","text":"Construct CallbackGroupType. Parameters: Name Type Description Default name str type name ['mutually_exclusive', 'reentrant'] required","title":"__init__()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupType.type_name","text":"Return callback group type name. Returns: Type Description str type name.","title":"type_name()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupValue","text":"Bases: ValueObject Callback group value object.","title":"CallbackGroupValue"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupValue.__init__","text":"Construct callback value object. Parameters: Name Type Description Default callback_group_type_name str required node_names Tuple [ str ] required","title":"__init__()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupValue.callback_group_type","text":"Get callback_group_type. Returns: Type Description CallbackGroupType","title":"callback_group_type()"},{"location":"value_objects/#caret_analyze.value_objects.callback_group.CallbackGroupValue.callback_ids","text":"Get callback ids. Returns: Type Description Tuple [ str , ...] callback ids","title":"callback_ids()"},{"location":"value_objects/#caret_analyze.value_objects.executor","text":"","title":"executor"},{"location":"value_objects/#caret_analyze.value_objects.executor.ExecutorStructValue","text":"Bases: ValueObject , Summarizable Executor info for architecture.","title":"ExecutorStructValue"},{"location":"value_objects/#caret_analyze.value_objects.executor.ExecutorType","text":"Bases: ValueObject executor type class.","title":"ExecutorType"},{"location":"value_objects/#caret_analyze.value_objects.executor.ExecutorType.type_name","text":"Return executor type name. Returns: Type Description str type name.","title":"type_name()"},{"location":"value_objects/#caret_analyze.value_objects.executor.ExecutorValue","text":"Bases: ValueObject Executor info for architecture.","title":"ExecutorValue"},{"location":"value_objects/#caret_analyze.value_objects.message_context","text":"","title":"message_context"},{"location":"value_objects/#caret_analyze.value_objects.message_context.CallbackChain","text":"Bases: MessageContext","title":"CallbackChain"},{"location":"value_objects/#caret_analyze.value_objects.message_context.CallbackChain.TYPE_NAME","text":"Callback chain. Latency is calculated from callback durations in the node path. When a path within a node passes through multiple callbacks, it is assumed that messages are passed between callbacks by a buffer of queue size 1 (ex. a member variable that stores a single message). If the queue size is larger than 1, the node latency may be calculated to be small.","title":"TYPE_NAME"},{"location":"value_objects/#caret_analyze.value_objects.message_context.InheritUniqueStamp","text":"Bases: MessageContext","title":"InheritUniqueStamp"},{"location":"value_objects/#caret_analyze.value_objects.message_context.InheritUniqueStamp.TYPE_NAME","text":"Inherit header timestamp. Latency is calculated for pub/sub messages with the same timestamp value. If the input timestamp is not unique, it may calculate an incorrect value.","title":"TYPE_NAME"},{"location":"value_objects/#caret_analyze.value_objects.message_context.MessageContext","text":"Bases: ValueObject , Summarizable Structured message context value.","title":"MessageContext"},{"location":"value_objects/#caret_analyze.value_objects.message_context.MessageContextType","text":"Bases: ValueObject Message context type.","title":"MessageContextType"},{"location":"value_objects/#caret_analyze.value_objects.message_context.Tilde","text":"Bases: MessageContext","title":"Tilde"},{"location":"value_objects/#caret_analyze.value_objects.message_context.Tilde.TYPE_NAME","text":"tilde. Latency is calculated from tilde.","title":"TYPE_NAME"},{"location":"value_objects/#caret_analyze.value_objects.message_context.UseLatestMessage","text":"Bases: MessageContext","title":"UseLatestMessage"},{"location":"value_objects/#caret_analyze.value_objects.message_context.UseLatestMessage.TYPE_NAME","text":"Use messsage context","title":"TYPE_NAME"},{"location":"value_objects/#caret_analyze.value_objects.node","text":"","title":"node"},{"location":"value_objects/#caret_analyze.value_objects.node.NodeStructValue","text":"Bases: ValueObject , Summarizable Executor info for architecture.","title":"NodeStructValue"},{"location":"value_objects/#caret_analyze.value_objects.path","text":"","title":"path"},{"location":"value_objects/#caret_analyze.value_objects.path.PathValue","text":"Bases: ValueObject Path name alias.","title":"PathValue"},{"location":"value_objects/#caret_analyze.value_objects.publisher","text":"","title":"publisher"},{"location":"value_objects/#caret_analyze.value_objects.publisher.PublisherStructValue","text":"Bases: ValueObject , Summarizable Structured publisher value.","title":"PublisherStructValue"},{"location":"value_objects/#caret_analyze.value_objects.publisher.PublisherValue","text":"Bases: ValueObject Publisher value.","title":"PublisherValue"},{"location":"value_objects/#caret_analyze.value_objects.qos","text":"","title":"qos"},{"location":"value_objects/#caret_analyze.value_objects.qos.Qos","text":"Bases: ValueObject , Summarizable qos info.","title":"Qos"},{"location":"value_objects/#caret_analyze.value_objects.service","text":"","title":"service"},{"location":"value_objects/#caret_analyze.value_objects.service.ServiceValue","text":"Bases: ValueObject Service info.","title":"ServiceValue"},{"location":"value_objects/#caret_analyze.value_objects.subscription","text":"","title":"subscription"},{"location":"value_objects/#caret_analyze.value_objects.subscription.SubscriptionStructValue","text":"Bases: ValueObject , Summarizable Subscription info.","title":"SubscriptionStructValue"},{"location":"value_objects/#caret_analyze.value_objects.subscription.SubscriptionValue","text":"Bases: ValueObject Subscription info.","title":"SubscriptionValue"},{"location":"value_objects/#caret_analyze.value_objects.timer","text":"","title":"timer"},{"location":"value_objects/#caret_analyze.value_objects.timer.TimerStructValue","text":"Bases: ValueObject , Summarizable Timer info.","title":"TimerStructValue"},{"location":"value_objects/#caret_analyze.value_objects.timer.TimerValue","text":"Bases: ValueObject Timer info.","title":"TimerValue"},{"location":"value_objects/#caret_analyze.value_objects.transform","text":"","title":"transform"},{"location":"value_objects/#caret_analyze.value_objects.transform.TransformBroadcasterStructValue","text":"Bases: ValueObject Structured transform broadcaster value.","title":"TransformBroadcasterStructValue"},{"location":"value_objects/#caret_analyze.value_objects.transform.TransformBufferValue","text":"Bases: ValueObject transform buffer info.","title":"TransformBufferValue"},{"location":"value_objects/#caret_analyze.value_objects.transform.TransformFrameBroadcasterStructValue","text":"Bases: ValueObject Structured transform broadcaster value.","title":"TransformFrameBroadcasterStructValue"},{"location":"value_objects/#caret_analyze.value_objects.transform.TransformFrameBufferValue","text":"Bases: ValueObject transform buffer info.","title":"TransformFrameBufferValue"},{"location":"value_objects/#caret_analyze.value_objects.value_object","text":"","title":"value_object"},{"location":"value_objects/#caret_analyze.value_objects.value_object.ValueObject","text":"Value object base class.","title":"ValueObject"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing","text":"","title":"variable_passing"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingStructValue","text":"Bases: ValueObject , Summarizable variable passing info.","title":"VariablePassingStructValue"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingStructValue.callback_id_read","text":"Get read-side callback id. Returns: Type Description [ str ] read-side callback id.","title":"callback_id_read()"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingStructValue.callback_id_write","text":"Get write-side callback id. Returns: Type Description [ str ] write-side callback id.","title":"callback_id_write()"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingStructValue.callback_name_read","text":"Get read-side callback name. Returns: Type Description [ str ] read-side callback name.","title":"callback_name_read()"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingStructValue.callback_name_write","text":"Get write-side callback name. Returns: Type Description [ str ] write-side callback name.","title":"callback_name_write()"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingStructValue.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingValue","text":"Bases: ValueObject variable passing info.","title":"VariablePassingValue"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingValue.callback_id_read","text":"Get read-side callback id. Returns: Type Description [ str ] read-side callback id.","title":"callback_id_read()"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingValue.callback_id_write","text":"Get write-side callback id. Returns: Type Description [ str ] write-side callback id.","title":"callback_id_write()"},{"location":"value_objects/#caret_analyze.value_objects.variable_passing.VariablePassingValue.node_name","text":"Get node name. Returns: Type Description str node name","title":"node_name()"}]}